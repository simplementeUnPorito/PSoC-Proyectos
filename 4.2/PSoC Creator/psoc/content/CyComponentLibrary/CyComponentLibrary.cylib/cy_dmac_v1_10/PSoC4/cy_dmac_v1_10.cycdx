<?xml version="1.0" encoding="us-ascii"?>

<deviceData version="1"
  xmlns="http://cypress.com/xsd/cydevicedata"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://cypress.com/xsd/cydevicedata cydevicedata.xsd">

  <block name="DMAC" desc="DMAC Registers" visible="true">

    <!-- DMA controller specific registers -->

    <register name="DMAC_CTL"
      address="CYREG_DMAC_CTL"
      bitWidth="32" desc="DMA controller control register">
      <field name="ENABLED" from="31" to="31" access="RW" desc="Global DMAC enable">
        <value name="Disabled" value="0" desc="DMA controller is disabled."/>
        <value name="Enabled"  value="1" desc="DMA controller is enabled."/>
      </field>
    </register>

    <register name="DMAC_STATUS"
      address="CYREG_DMAC_STATUS"
      bitWidth="32" desc="DMA controller status register">
      <field name="DATA_NR" from="15" to="0" access="R" desc="Specifies the index of the currently active data transfer. This value increases from '0' to the DATA_NR field specified of the currently active descriptor control word.">
      </field>
      <field name="CH_ADDR" from="20" to="16" access="R" desc="Specifies the channel number of the currently active channel. For example, if channel 7 is active, DMAC_STATUS.ACTIVE is '1' and STATUS.CH_ADDR is '7'.">
      </field>
      <field name="STATE" from="26" to="24" access="R" desc="State of the data transfer engine.">
        <value name="IDLE"            value="000" desc="Idle state when the DMA is not active."/>
        <value name="LOAD_DESCR"      value="001" desc="The DMA is loading the descriptor to the DMA transfer engine."/>
        <value name="LOAD_SRC"        value="010" desc="The DMA is getting the value from the source location."/>
        <value name="STORE_DST"       value="011" desc="The DMA is storing the value at the destination location."/>
        <value name="STORE_DESCR"     value="100" desc="The DMA is updating the descriptors after completion of transfer."/>
        <value name="WAIT_TRIG_DEACT" value="101" desc="The DMA is waiting for the level sensitive trigger to deactivate."/>
        <value name="STORE_ERROR"     value="110" desc="There was an error during the transaction and the DMA is writing the error code to the channel status register."/>
      </field>
      <field name="PRIO" from="29" to="28" access="R" desc="Specifies the priority of the currently active channel.">
      </field>
      <field name="PING_PONG" from="31" to="31" access="R" desc="Specifies whether the PING descriptor ('0') or PONG descriptor ('1') of the channel is currently in use.">
        <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
        <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
      </field>
      <field name="ACTIVE" from="31" to="31" access="R" desc="Specifies if there is a currently active (pending) channel in the data transfer engine.">
        <value name="IDLE" value="0" desc="No currently active channel."/>
        <value name="ACTIVE"  value="1" desc="Currently active channel."/>
      </field>
    </register>

    <register name="DMAC_STATUS_SRC_ADDR"
      address="CYREG_DMAC_STATUS_SRC_ADDR"
      bitWidth="32" desc="Source address currently being used by the DMA controller">
      <field name="ADDR" from="31" to="0" access="R" desc="The source address currently being used by the DMA transfer engine. This field is provided for debug purposes. Note while reading the DMAC_STATUS, DMAC_STATUS_SRC_ADDR and DMAC_STATUS_DST_ADDR registers, the transfer engine may have advanced after one or more of these reads. Meaning the register values may not be related to each other.">
      </field>
    </register>

    <register name="DMAC_STATUS_DST_ADDR"
      address="CYREG_DMAC_STATUS_DST_ADDR"
      bitWidth="32" desc="Destination address currently being used by the DMA controller">
      <field name="ADDR" from="31" to="0" access="R" desc="The destination address currently being used by the DMA transfer engine. This field is provided for debug purposes. Note while reading the DMAC_STATUS, DMAC_STATUS_SRC_ADDR and DMAC_STATUS_DST_ADDR registers, the transfer engine may have advanced after one or more of these reads. Meaning the register values may not be related to each other.">
      </field>
    </register>

    <register name="DMAC_STATUS_CH_ACT"
      address="CYREG_DMAC_STATUS_CH_ACT"
      bitWidth="32" desc="Channel activation status">
      <field name="CH" from="31" to="0" access="R" desc="Channel activation status. Bit i is associated to channel i. Software reads this field to get information on all actively pending channels (either in pending or in the data transfer engine).">
      </field>
    </register>

    <register name="DMAC_INTR"
      address="CYREG_DMAC_INTR"
      bitWidth="32" desc="Interrupt register">
      <field name="CH" from="31" to="0" access="RW" desc="Set to '1', when event is detected. Write INTR field with '1', to clear bit. Write INTR_SET field with '1', to set bit.">
      </field>
    </register>

    <register name="DMAC_INTR_SET"
      address="CYREG_DMAC_INTR_SET"
      bitWidth="32" desc="Interrupt set register">
      <field name="CH" from="31" to="0" access="RW" desc="Write INTR_SET field with '1' to set corresponding INTR field (a write of '0' has no effect).">
      </field>
    </register>

    <register name="DMAC_INTR_MASK"
      address="CYREG_DMAC_INTR_MASK"
      bitWidth="32" desc="Interrupt mask register">
      <field name="CH" from="31" to="0" access="RW" desc="Mask for corresponding field in INTR register.">
      </field>
    </register>
    
    <register name="DMAC_INTR_MASKED"
      address="CYREG_DMAC_INTR_MASKED"
      bitWidth="32" desc="Interrupt masked register">
      <field name="CH" from="31" to="0" access="R" desc="Bitwise AND between the interrupt reguest (INTR) and mask (INTR_MASK) registers.">
      </field>
    </register>
  
    <!-- DMA channel specific registers -->

    <block name="DMAC_CH" desc="Channels control registers" visible="true">
      <register name="CTL0"
        address="CYREG_DMAC_CH_CTL0"
        bitWidth="32" desc="DMA channel 0 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL1"
        address="CYREG_DMAC_CH_CTL1"
        bitWidth="32" desc="DMA channel 1 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL2"
        address="CYREG_DMAC_CH_CTL2"
        bitWidth="32" desc="DMA channel 2 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL3"
        address="CYREG_DMAC_CH_CTL3"
        bitWidth="32" desc="DMA channel 3 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL4"
        address="CYREG_DMAC_CH_CTL4"
        bitWidth="32" desc="DMA channel 4 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL5"
        address="CYREG_DMAC_CH_CTL5"
        bitWidth="32" desc="DMA channel 5 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL6"
        address="CYREG_DMAC_CH_CTL6"
        bitWidth="32" desc="DMA channel 6 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL7"
        address="CYREG_DMAC_CH_CTL7"
        bitWidth="32" desc="DMA channel 7 control register">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL8"
        address="`$CH8_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 8 control register"
        hidden="`$CH8_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL9"
        address="`$CH9_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 9 control register"
        hidden="`$CH9_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL10"
        address="`$CH10_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 10 control register"
        hidden="`$CH10_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL11"
        address="`$CH11_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 11 control register"
        hidden="`$CH11_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL12"
        address="`$CH12_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 12 control register"
        hidden="`$CH12_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL13"
        address="`$CH13_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 13 control register"
        hidden="`$CH13_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL14"
        address="`$CH14_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 14 control register"
        hidden="`$CH14_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL15"
        address="`$CH15_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 15 control register"
        hidden="`$CH15_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL16"
        address="`$CH16_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 16 control register"
        hidden="`$CH16_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL17"
        address="`$CH17_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 17 control register"
        hidden="`$CH17_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL18"
        address="`$CH18_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 18 control register"
        hidden="`$CH18_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL19"
        address="`$CH19_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 19 control register"
        hidden="`$CH19_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL20"
        address="`$CH20_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 20 control register"
        hidden="`$CH20_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL21"
        address="`$CH21_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 21 control register"
        hidden="`$CH21_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL22"
        address="`$CH22_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 22 control register"
        hidden="`$CH22_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL23"
        address="`$CH23_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 23 control register"
        hidden="`$CH23_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL24"
        address="`$CH24_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 24 control register"
        hidden="`$CH24_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL25"
        address="`$CH25_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 25 control register"
        hidden="`$CH25_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL26"
        address="`$CH26_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 26 control register"
        hidden="`$CH26_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL27"
        address="`$CH27_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 27 control register"
        hidden="`$CH27_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL28"
        address="`$CH28_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 28 control register"
        hidden="`$CH28_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL29"
        address="`$CH29_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 29 control register"
        hidden="`$CH29_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL30"
        address="`$CH30_CTL_ADDR`"
        bitWidth="32" desc="DMA channel 30 control register"
        hidden="`$CH30_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>

      <register name="CTL31"
        address="`$CH31_CTL_ADDR`"
        bitWidth="31" desc="DMA channel 31 control register"
        hidden="`$CH31_REMOVE`">
        <field name="ENABLED" from="31" to="31" access="RW" desc="Channel enable control.">
          <value name="Disabled" value="0" desc="Channel is currently disabled."/>
          <value name="Enabled"  value="1" desc="Channel is currently enabled."/>
        </field>
        <field name="PING_PONG" from="30" to="30" access="RW" desc="Identifies the descriptor structure that is currently in use by the DMA controller.">
          <value name="DESCR0" value="0" desc="Descriptor 0 (PING) is currently in use."/>
          <value name="DESCR1" value="1" desc="Descriptor 1 (PONG) is currently in use."/>
        </field>
        <field name="PRIO" from="29" to="28" access="RW" desc="Channel priority. Priority can be 0,1,2 or 3. 0 is the highest.">
        </field>
      </register>
    </block>
 
    <!-- Descriptor specific registers -->

    <!-- Channel 0 descriptor 0 registers -->

    <block name="DMAC_DESCR0_PING" desc="Channel 0, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR0_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 0">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR0_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 0">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR0_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 0">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR0_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 0">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 0 descriptor 1 registers -->
    <block name="DMAC_DESCR0_PONG" desc="Channel 0, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR0_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 0">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR0_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 0">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR0_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 0">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR0_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 0">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 1 descriptor 0 registers -->

    <block name="DMAC_DESCR1_PING" desc="Channel 1, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR1_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 1">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR1_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 1">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR1_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 1">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR1_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 1">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 1 descriptor 1 registers -->
    <block name="DMAC_DESCR1_PONG" desc="Channel 1, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR1_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 1">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR1_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 1">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR1_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 1">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR1_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 1">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>
    
    <!-- Channel 2 descriptor 0 registers -->

    <block name="DMAC_DESCR2_PING" desc="Channel 2, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR2_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 2">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR2_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 2">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR2_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 2">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR2_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 2">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 2 descriptor 1 registers -->
    <block name="DMAC_DESCR2_PONG" desc="Channel 2, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR2_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 2">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR2_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 2">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR2_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 2">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR2_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 2">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 3 descriptor 0 registers -->

    <block name="DMAC_DESCR3_PING" desc="Channel 3, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR3_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 3">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR3_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 3">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR3_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 3">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR3_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 3">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 3 descriptor 1 registers -->
    <block name="DMAC_DESCR3_PONG" desc="Channel 3, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR3_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 3">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR3_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 3">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR3_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 3">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR3_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 3">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>
    
    <!-- Channel 4 descriptor 0 registers -->

    <block name="DMAC_DESCR4_PING" desc="Channel 4, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR4_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 4">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR4_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 4">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR4_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 4">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR4_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 4">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 4 descriptor 1 registers -->
    <block name="DMAC_DESCR4_PONG" desc="Channel 4, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR4_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 4">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR4_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 4">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR4_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 4">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR4_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 4">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>
    
    <!-- Channel 5 descriptor 0 registers -->

    <block name="DMAC_DESCR5_PING" desc="Channel 5, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR5_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 5">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR5_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 5">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR5_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 5">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR5_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 5">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 5 descriptor 1 registers -->
    <block name="DMAC_DESCR5_PONG" desc="Channel 5, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR5_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 5">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR5_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 5">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR5_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 5">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR5_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 5">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>
    
    <!-- Channel 6 descriptor 0 registers -->

    <block name="DMAC_DESCR6_PING" desc="Channel 6, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR6_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 6">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR6_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 6">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR6_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 6">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR6_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 6">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 6 descriptor 1 registers -->
    <block name="DMAC_DESCR6_PONG" desc="Channel 6, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR6_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 6">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR6_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 6">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR6_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 6">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR6_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 6">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>
    
    <!-- Channel 7 descriptor 0 registers -->

    <block name="DMAC_DESCR7_PING" desc="Channel 7, descriptor 0" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR7_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 7">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR7_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 7">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR7_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 7">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR7_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 7">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 7 descriptor 1 registers -->
    <block name="DMAC_DESCR7_PONG" desc="Channel 7, descriptor 1" visible="true">

      <register name="SRC"
        address="CYREG_DMAC_DESCR7_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 7">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR7_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 7">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR7_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 7">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR7_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 7">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 8 descriptor 0 registers -->

    <block name="DMAC_DESCR8_PING" desc="Channel 8, descriptor 0" visible="!`$CH8_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR8_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 8">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR8_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 8">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR8_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 8">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR8_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 8">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 8 descriptor 1 registers -->
    <block name="DMAC_DESCR8_PONG" desc="Channel 8, descriptor 1" visible="!`$CH8_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR8_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 8">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR8_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 8">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR8_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 8">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR8_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 8">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 9 descriptor 0 registers -->

    <block name="DMAC_DESCR9_PING" desc="Channel 9, descriptor 0" visible="!`$CH9_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR9_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 9">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR9_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 9">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR9_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 9">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR9_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 9">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 9 descriptor 1 registers -->
    <block name="DMAC_DESCR9_PONG" desc="Channel 9, descriptor 1" visible="!`$CH9_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR9_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 9">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR9_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 9">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR9_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 9">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR9_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 9">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 10 descriptor 0 registers -->

    <block name="DMAC_DESCR10_PING" desc="Channel 10, descriptor 0" visible="!`$CH10_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR10_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 10">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR10_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 10">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR10_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 10">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR10_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 10">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 10 descriptor 1 registers -->
    <block name="DMAC_DESCR10_PONG" desc="Channel 10, descriptor 1" visible="!`$CH10_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR10_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 10">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR10_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 10">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR10_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 10">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR10_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 10">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 11 descriptor 0 registers -->

    <block name="DMAC_DESCR11_PING" desc="Channel 11, descriptor 0" visible="!`$CH11_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR11_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 11">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR11_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 11">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR11_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 11">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR11_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 11">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 11 descriptor 1 registers -->
    <block name="DMAC_DESCR11_PONG" desc="Channel 11, descriptor 1" visible="!`$CH11_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR11_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 11">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR11_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 11">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR11_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 11">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR11_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 11">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 12 descriptor 0 registers -->

    <block name="DMAC_DESCR12_PING" desc="Channel 12, descriptor 0" visible="!`$CH12_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR12_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 12">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR12_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 12">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR12_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 12">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR12_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 12">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 12 descriptor 1 registers -->
    <block name="DMAC_DESCR12_PONG" desc="Channel 12, descriptor 1" visible="!`$CH12_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR12_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 12">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR12_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 12">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR12_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 12">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR12_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 12">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 13 descriptor 0 registers -->

    <block name="DMAC_DESCR13_PING" desc="Channel 13, descriptor 0" visible="!`$CH13_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR13_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 13">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR13_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 13">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR13_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 13">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR13_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 13">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 13 descriptor 1 registers -->
    <block name="DMAC_DESCR13_PONG" desc="Channel 13, descriptor 1" visible="!`$CH13_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR13_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 13">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR13_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 13">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR13_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 13">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR13_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 13">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 14 descriptor 0 registers -->

    <block name="DMAC_DESCR14_PING" desc="Channel 14, descriptor 0" visible="!`$CH14_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR14_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 14">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR14_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 14">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR14_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 14">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR14_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 14">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 14 descriptor 1 registers -->
    <block name="DMAC_DESCR14_PONG" desc="Channel 14, descriptor 1" visible="!`$CH14_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR14_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 14">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR14_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 14">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR14_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 14">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR14_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 14">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 15 descriptor 0 registers -->

    <block name="DMAC_DESCR15_PING" desc="Channel 15, descriptor 0" visible="!`$CH15_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR15_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 15">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR15_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 15">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR15_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 15">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR15_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 15">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 15 descriptor 1 registers -->
    <block name="DMAC_DESCR15_PONG" desc="Channel 15, descriptor 1" visible="!`$CH15_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR15_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 15">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR15_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 15">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR15_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 15">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR15_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 15">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 16 descriptor 0 registers -->

    <block name="DMAC_DESCR16_PING" desc="Channel 16, descriptor 0" visible="!`$CH16_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR16_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 16">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR16_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 16">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR16_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 16">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR16_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 16">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 16 descriptor 1 registers -->
    <block name="DMAC_DESCR16_PONG" desc="Channel 16, descriptor 1" visible="!`$CH16_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR16_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 16">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR16_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 16">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR16_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 16">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR16_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 16">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 17 descriptor 0 registers -->

    <block name="DMAC_DESCR17_PING" desc="Channel 17, descriptor 0" visible="!`$CH17_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR17_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 17">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR17_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 17">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR17_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 17">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR17_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 17">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 17 descriptor 1 registers -->
    <block name="DMAC_DESCR17_PONG" desc="Channel 17, descriptor 1" visible="!`$CH17_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR17_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 17">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR17_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 17">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR17_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 17">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR17_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 17">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 18 descriptor 0 registers -->

    <block name="DMAC_DESCR18_PING" desc="Channel 18, descriptor 0" visible="!`$CH18_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR18_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 18">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR18_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 18">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR18_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 18">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR18_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 18">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 18 descriptor 1 registers -->
    <block name="DMAC_DESCR18_PONG" desc="Channel 18, descriptor 1" visible="!`$CH18_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR18_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 18">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR18_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 18">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR18_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 18">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR18_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 18">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 19 descriptor 0 registers -->

    <block name="DMAC_DESCR19_PING" desc="Channel 19, descriptor 0" visible="!`$CH19_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR19_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 19">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR19_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 19">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR19_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 19">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR19_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 19">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 19 descriptor 1 registers -->
    <block name="DMAC_DESCR19_PONG" desc="Channel 19, descriptor 1" visible="!`$CH19_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR19_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 19">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR19_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 19">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR19_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 19">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR19_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 19">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 20 descriptor 0 registers -->

    <block name="DMAC_DESCR20_PING" desc="Channel 20, descriptor 0" visible="!`$CH20_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR20_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 20">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR20_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 20">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR20_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 20">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR20_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 20">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 20 descriptor 1 registers -->
    <block name="DMAC_DESCR20_PONG" desc="Channel 20, descriptor 1" visible="!`$CH20_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR20_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 20">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR20_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 20">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR20_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 20">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR20_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 20">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 21 descriptor 0 registers -->

    <block name="DMAC_DESCR21_PING" desc="Channel 21, descriptor 0" visible="!`$CH21_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR21_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 21">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR21_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 21">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR21_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 21">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR21_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 21">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 21 descriptor 1 registers -->
    <block name="DMAC_DESCR21_PONG" desc="Channel 21, descriptor 1" visible="!`$CH21_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR21_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 21">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR21_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 21">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR21_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 21">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR21_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 21">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 22 descriptor 0 registers -->

    <block name="DMAC_DESCR22_PING" desc="Channel 22, descriptor 0" visible="!`$CH22_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR22_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 22">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR22_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 22">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR22_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 22">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR22_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 22">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 22 descriptor 1 registers -->
    <block name="DMAC_DESCR22_PONG" desc="Channel 22, descriptor 1" visible="!`$CH22_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR22_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 22">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR22_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 22">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR22_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 22">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR22_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 22">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 23 descriptor 0 registers -->

    <block name="DMAC_DESCR23_PING" desc="Channel 23, descriptor 0" visible="!`$CH23_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR23_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 23">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR23_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 23">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR23_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 23">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR23_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 23">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 23 descriptor 1 registers -->
    <block name="DMAC_DESCR23_PONG" desc="Channel 23, descriptor 1" visible="!`$CH23_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR23_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 23">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR23_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 23">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR23_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 23">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR23_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 23">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 24 descriptor 0 registers -->

    <block name="DMAC_DESCR24_PING" desc="Channel 24, descriptor 0" visible="!`$CH24_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR24_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 24">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR24_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 24">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR24_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 24">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR24_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 24">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 24 descriptor 1 registers -->
    <block name="DMAC_DESCR24_PONG" desc="Channel 24, descriptor 1" visible="!`$CH24_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR24_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 24">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR24_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 24">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR24_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 24">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR24_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 24">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 25 descriptor 0 registers -->

    <block name="DMAC_DESCR25_PING" desc="Channel 25, descriptor 0" visible="!`$CH25_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR25_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 25">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR25_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 25">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR25_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 25">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR25_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 25">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 25 descriptor 1 registers -->
    <block name="DMAC_DESCR25_PONG" desc="Channel 25, descriptor 1" visible="!`$CH25_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR25_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 25">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR25_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 25">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR25_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 25">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR25_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 25">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 26 descriptor 0 registers -->

    <block name="DMAC_DESCR26_PING" desc="Channel 26, descriptor 0" visible="!`$CH26_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR26_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 26">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR26_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 26">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR26_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 26">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR26_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 26">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 26 descriptor 1 registers -->
    <block name="DMAC_DESCR26_PONG" desc="Channel 26, descriptor 1" visible="!`$CH26_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR26_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 26">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR26_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 26">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR26_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 26">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR26_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 26">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 27 descriptor 0 registers -->

    <block name="DMAC_DESCR27_PING" desc="Channel 27, descriptor 0" visible="!`$CH27_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR27_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 27">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR27_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 27">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR27_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 27">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR27_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 27">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 27 descriptor 1 registers -->
    <block name="DMAC_DESCR27_PONG" desc="Channel 27, descriptor 1" visible="!`$CH27_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR27_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 27">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR27_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 27">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR27_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 27">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR27_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 27">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 28 descriptor 0 registers -->

    <block name="DMAC_DESCR28_PING" desc="Channel 28, descriptor 0" visible="!`$CH28_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR28_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 28">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR28_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 28">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR28_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 28">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR28_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 28">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 28 descriptor 1 registers -->
    <block name="DMAC_DESCR28_PONG" desc="Channel 28, descriptor 1" visible="!`$CH28_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR28_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 28">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR28_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 28">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR28_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 28">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR28_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 28">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 29 descriptor 0 registers -->

    <block name="DMAC_DESCR29_PING" desc="Channel 29, descriptor 0" visible="!`$CH29_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR29_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 29">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR29_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 29">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR29_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 29">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR29_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 29">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 29 descriptor 1 registers -->
    <block name="DMAC_DESCR29_PONG" desc="Channel 29, descriptor 1" visible="!`$CH29_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR29_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 29">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR29_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 29">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR29_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 29">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR29_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 29">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 30 descriptor 0 registers -->

    <block name="DMAC_DESCR30_PING" desc="Channel 30, descriptor 0" visible="!`$CH30_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR30_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 30">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR30_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 30">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR30_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 30">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR30_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 30">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 30 descriptor 1 registers -->
    <block name="DMAC_DESCR30_PONG" desc="Channel 30, descriptor 1" visible="!`$CH30_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR30_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 30">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR30_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 30">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR30_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 30">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR30_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 30">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 31 descriptor 0 registers -->

    <block name="DMAC_DESCR31_PING" desc="Channel 31, descriptor 0" visible="!`$CH31_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR31_PING_SRC"
        bitWidth="32" desc="Descriptor 0 source address location for channel 31">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR31_PING_DST"
        bitWidth="32" desc="Descriptor 0 destination address location for channel 31">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR31_PING_CTL"
        bitWidth="32" desc="Descriptor 0 control register for channel 31">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR31_PING_STATUS"
        bitWidth="32" desc="Descriptor 0 status register for channel 31">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

    <!-- Channel 31 descriptor 1 registers -->
    <block name="DMAC_DESCR31_PONG" desc="Channel 31, descriptor 1" visible="!`$CH31_REMOVE`">

      <register name="SRC"
        address="CYREG_DMAC_DESCR31_PONG_SRC"
        bitWidth="32" desc="Descriptor 1 source address location for channel 31">
        <field name="SRC" from="31" to="0" access="RW" desc="Source address.">
        </field>
      </register>

      <register name="DST"
        address="CYREG_DMAC_DESCR31_PONG_DST"
        bitWidth="32" desc="Descriptor 1 destination address location for channel 31">
        <field name="DST" from="31" to="0" access="RW" desc="Destination address.">
        </field>
      </register>

      <register name="CTL"
        address="CYREG_DMAC_DESCR31_PONG_CTL"
        bitWidth="32" desc="Descriptor 1 control register for channel 31">
        <field name="DATA_NR" from="15" to="0" access="RW" desc="Number of data elements this descriptor transfers. A value of N results in a transfer of N+1 data elements.">
        </field>

        <field name="DATA_SIZE" from="17" to="16" access="RW" desc="Specifies the data element size.">
          <value name="BYTE" value="00" desc="1 byte."/>
          <value name="HALFWORD" value="01" desc="Halfword (2 bytes)."/>
          <value name="WORD" value="10" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_TRANSFER_SIZE" from="20" to="20" access="RW" desc="Specifies the bus transfer size to the destination location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="DST_ADDR_INCR" from="21" to="21" access="RW" desc="Specifies whether the destination address is incremented by the DST_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_DST_ADDR" value="1" desc="Increment the destination address."/>
        </field>

        <field name="SRC_TRANSFER_SIZE" from="22" to="22" access="RW" desc="Specifies the bus transfer size to the source location.">
          <value name="DATA_SIZE" value="0" desc="As specified by DATA_SIZE field."/>
          <value name="WORD" value="1" desc="Word (4 bytes)."/>
        </field>

        <field name="SRC_ADDR_INCR" from="23" to="23" access="RW" desc="Specifies whether the source address is incremented by the SRC_TRANSFER_SIZE after the transfer of each data element.">
          <value name="INC_NONE" value="0" desc="No address increment."/>
          <value name="INC_SRC_ADDR" value="1" desc="Increment the source address."/>
        </field>
 
        <field name="WAIT_FOR_DEACT" from="25" to="24" access="RW" desc="Specifies whether the data transfer engine should wait for the channel to be deactivated; i.e. the selected system trigger is not active. This field is used to synchronize the controller's data transfer(s) with the agent that generated the trigger. This field is ONLY used at the completion of an opcode. E.g., a FIFO indicates that it is empty and it needs a new data sample. The agent removes the trigger ONLY when the data sample has been written by the transfer engine AND received by the agent.  Furthermore, the agent's trigger may be delayed by a few cycles before it reaches the DW/DMA controller. This field is used for level sensitive trigger, which reflect state (pulse sensitive triggers should have this field set to '0'). The wait cycles incurred by this field reduce DW/DMA controller performance.">
          <value name="PULSE"         value="00" desc="Do not wait for de-activation (for pulse sensitive triggers)."/>
          <value name="LEVEL_FOUR"    value="01" desc="Wait for up to 4 cycles."/>
          <value name="LEVEL_EIGHT"   value="10" desc="Wait for up to 8 cycles."/>
          <value name="LEVEL_UNKNOWN" value="11" desc="Wait indefinitely. This option may result in DMA controller lockup if the system trigger is not de-activated by the source agent."/>
        </field>

        <field name="INV_DESCR" from="26" to="26" access="RW" desc="If set, the VALID bit of the descriptor's STATUS word is set to '0' on completion of the current descriptor structure.">
        </field>
        
        <field name="SET_CAUSE" from="27" to="27" access="RW" desc="If set, the interrupt bit of the channel is set to '1' on completion of the current descriptor structure.">
        </field>

        <field name="PREEMPTABLE" from="28" to="28" access="RW" desc="If set, the transfer is preemptable. Multi data element transfers are constructed out of multiple single data element load (from the source location) and store (to the destination location) sequences. This field allows higher priority activated channels to preempt the current transfer in between these atomic (load, store) sequences. Preemption will NOT deactivate the current channel. As a result, after completion of a higher priority activated channel, the current channel is rescheduled.">
        </field>

        <field name="FLIPPING" from="29" to="29" access="RW" desc="If set, on completion of the current descriptor structure, the current descriptor identifier is flipped/inverted. In DMA mode, descriptor list transfer, flipping of the current descriptor identifier can be used to construct a linked list of descriptor structures.">
        </field>

        <field name="OPCODE" from="31" to="30" access="RW" desc="Specifies how the DMA reacts to a trigger event.">
          <value name="SINGLE_DATA_ELEMENT"       value="00" desc="A single trigger initiates a single data element transfer. This opcode specifies a transfer of a single data element. The current descriptor is completed when the amount of transferred single data elements equals the programmed buffer size (DATA_NR+1)."/>
          <value name="ENTIRE_DESCRIPTOR"         value="01" desc="A single trigger initiates an entire descriptor transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure. The current descriptor is completed when its data transfer is completed."/>
          <value name="ENTIRE_DESCRIPTOR_CHAIN"   value="10" desc="A single trigger initiates a descriptor list transfer. This opcode specifies a transfer of DATA_NR+1 data elements as specified by the current descriptor structure and by successive valid descriptors. The current descriptor is completed when its data transfer is completed. This OPCODE relies on FLIPPING to be set to '1', such that the CHi_CTL.PING_PONG field is flipped/inverted and the successive descriptor is used. This continues for as long as the successive descriptor is valid. Note that as the HW is using the PING/PONG descriptor, the SW can prepare the alternate PONG/PING descriptor. The interrupt mechanism is used by HW to convey to the SW that the current descriptor is completed (and can be prepared for a successive transfer)."/>
        </field>
      </register>

      <register name="STATUS"
        address="CYREG_DMAC_DESCR31_PONG_STATUS"
        bitWidth="32" desc="Descriptor 1 status register for channel 31">
        <field name="VALID" from="31" to="31" access="RW" desc="Descriptor validity status. Hardware set this field to '0' when a descriptor is done, but only if CONTROL.INV_DESCR is '1'. Software sets this field to '1' when a descriptor is initialized.">
          <value name="INVALID" value="0" desc="Invalid, cannot be used for a data transfer. An attempt to use this descriptor for a data transfer will result in an INVALID_DESCR response code and the interrupt cause bit is set to '1'."/>
          <value name="VALID"   value="1" desc="Valid."/>
        </field>
        <field name="RESONSE" from="18" to="16" access="RW" desc="Response code (the first two codes NO_ERROR and DONE are the result of normal behavior, the other codes are the result of erroneous behavior).">
          <value name="NO_ERROR" value="000" desc="No error. Setting this response does NOT set the interrupt bit to '1'. STATUS.VALID is NOT affected. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is not updated. This response is used for an unused or not completed descriptor. Software should set the RESPONSE field to '0'/NO_ERROR during descriptor initialization."/>
          <value name="DONE"          value="001" desc="Descriptor is done (without errors). Setting this response sets the interrupt cause bit to '1' if CONTROL.SET_CAUSE is '1'. STATUS.VALID is set to '0' if CONTROL.INV_DESCR is '1'. CHx_CTL.ENABLED is NOT affected. CHx_CTL.PING_PONG is updated if CONTROL.FLIPPING is '1'."/>
          <value name="SRC_BUS_ERROR" value="010" desc="Bus error while loading data from the source location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_BUS_ERROR" value="011" desc="Bus error while storing data to the destination location. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '1'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="SRC_MISAL"     value="100" desc="Misalignment of source address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="DST_MISAL"     value="101" desc="Misalignment of destination address. This occurs on a 16-bit bus transfer that is not 2-byte aligned or on a 32-bit bus transfer that is not 4-byte aligned. Setting this response sets the interrupt cause bit to '1'. STATUS.VALID is set '0'. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
          <value name="INVALID"       value="110" desc="Invalid descriptor (STATUS.VALID is '0'). This occurs when an activated channel has an invalid descriptor. CHx_CTL.ENABLED is set to '0'. CHx_CTL.PING_PONG is not updated (it identifies the descriptor that caused the error)."/>
        </field>
        <field name="CURR_DATA_NR" from="15" to="0" access="RW" desc="Specifies the index of the current data transfer. This value increases from 0 to CONTROL.DATA_NR. HW sets this field: &#xA; - When a descriptor is done (RESPONSE is DONE), the field is set to '0' when PING_CTL.INV_DESCR is '0' and the field is set to PING_CTL.DATA_NR when PING_CTL.INV_DESCR is '1'.
                                                                &#xA; - When a descriptor is not done (RESPONSE is NO_ERROR), the field reflects the progress of a data transfer.
                                                                &#xA; - In case of erroneous behavior (RESPONSE is neither DONE or NO_ERROR), the field is not updated, but keeps its value to ease debugging.
                                                                &#xA; HW only modifies this field for an active descriptor (STATUS.VALID to be '1'). At descriptor initialization, SW should set this field to '0'.
                                                                &#xA; This field allows software to read the progress of the data transfer. Note that SRC.ADDR and DST.ADDR represent base addresses and are not modified during data transfer. However, STATUS.CURR_DATA_NR is modified during data transfer and provides an offset wrt. the base addresses.">
        </field>
      </register>
    </block>

  </block>  
</deviceData>