//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCB_P4_v4_0 {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SCB_P4_v4_0.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Actual baud rate (bps): {0}.
        /// </summary>
        internal static string ActualBaudRateDisplayFormat {
            get {
                return ResourceManager.GetString("ActualBaudRateDisplayFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Actual bit rate (kbps): {0}.
        /// </summary>
        internal static string ActualBitRateDisplayFormat {
            get {
                return ResourceManager.GetString("ActualBitRateDisplayFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Actual data rate (kbps): {0}.
        /// </summary>
        internal static string ActualDataRateDisplayFormat {
            get {
                return ResourceManager.GetString("ActualDataRateDisplayFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Actual data rate (kbps):.
        /// </summary>
        internal static string ActualDataRateLabel {
            get {
                return ResourceManager.GetString("ActualDataRateLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The actual data rate is faster than the requested data rate..
        /// </summary>
        internal static string ActualDataRateMaster {
            get {
                return ResourceManager.GetString("ActualDataRateMaster", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The actual data rate must not exceed 400 kbps for  I2C Multi-Master-Slave mode when wakeup from the deep sleep mode option is enabled..
        /// </summary>
        internal static string ActualDataRateMultiMasterError {
            get {
                return ResourceManager.GetString("ActualDataRateMultiMasterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The baud rate value must be 115200, 57600, 38400, 19200, 9600, 2400 or 1200 bps when the IrDA mode is selected..
        /// </summary>
        internal static string BaudRateIrDAValueError {
            get {
                return ResourceManager.GetString("BaudRateIrDAValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The baud rate must be between {0} and {1} bps..
        /// </summary>
        internal static string BaudRateValueError {
            get {
                return ResourceManager.GetString("BaudRateValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected configuration is not supported by the bootloader..
        /// </summary>
        internal static string BtldrSupportError {
            get {
                return ResourceManager.GetString("BtldrSupportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Built-in.
        /// </summary>
        internal static string BuiltInTabDisplayName {
            get {
                return ResourceManager.GetString("BuiltInTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer size must be greater or equal to 16 when the byte mode is enabled..
        /// </summary>
        internal static string ByteModeBufferSizeError {
            get {
                return ResourceManager.GetString("ByteModeBufferSizeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To select a data bits value greater than 8, disable the byte mode on the Advanced tab..
        /// </summary>
        internal static string ByteModeDataBitsError {
            get {
                return ResourceManager.GetString("ByteModeDataBitsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To enable the byte mode, change the data bits value to less than 9 on the Basic tab..
        /// </summary>
        internal static string ByteModeDataBitsErrorAdv {
            get {
                return ResourceManager.GetString("ByteModeDataBitsErrorAdv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The byte mode is not available for the selected device..
        /// </summary>
        internal static string ByteModeError {
            get {
                return ResourceManager.GetString("ByteModeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The byte mode is not available when clock stretching is disabled..
        /// </summary>
        internal static string ByteModeVsClockStreching {
            get {
                return ResourceManager.GetString("ByteModeVsClockStreching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change mode to I2C, SPI, UART or Unconfigured..
        /// </summary>
        internal static string ChangeMode {
            get {
                return ResourceManager.GetString("ChangeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR.
        /// </summary>
        internal static string ClockDisplayError {
            get {
                return ResourceManager.GetString("ClockDisplayError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UNKNOWN.
        /// </summary>
        internal static string ClockDisplayUnknown {
            get {
                return ResourceManager.GetString("ClockDisplayUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UNKNOWN (Press &quot;Apply&quot;).
        /// </summary>
        internal static string ClockDisplayUnknownPressApply {
            get {
                return ResourceManager.GetString("ClockDisplayUnknownPressApply", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clock frequency (kHz):.
        /// </summary>
        internal static string ClockFrequencyLabel {
            get {
                return ResourceManager.GetString("ClockFrequencyLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data rate value must be between {0} and {1} kbps for the selected device..
        /// </summary>
        internal static string DataRateDeviceError {
            get {
                return ResourceManager.GetString("DataRateDeviceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data rate value must be between {0} and {1} kbps..
        /// </summary>
        internal static string DataRateValueError {
            get {
                return ResourceManager.GetString("DataRateValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data rate value must be between {0} and {1} kbps when clock stretching is disabled..
        /// </summary>
        internal static string DataRateValueErrorNonClockStretching {
            get {
                return ResourceManager.GetString("DataRateValueErrorNonClockStretching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TX or RX trigger DMA output is only available if the FIFO is used..
        /// </summary>
        internal static string DMAFifoNotUsedError {
            get {
                return ResourceManager.GetString("DMAFifoNotUsedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TX or RX trigger output requires DMA but the selected device does not have DMA controller..
        /// </summary>
        internal static string DMASupportError {
            get {
                return ResourceManager.GetString("DMASupportError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wakeup from the deep sleep mode is not supported if clock stretching is disabled for the selected device..
        /// </summary>
        internal static string ErrMsgWakeUpFromSleep {
            get {
                return ResourceManager.GetString("ErrMsgWakeUpFromSleep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data bits value must be between {0} and {1}..
        /// </summary>
        internal static string ErrorDataBitsLimit {
            get {
                return ResourceManager.GetString("ErrorDataBitsLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor must be between {0} and {1} when the median filter is disabled..
        /// </summary>
        internal static string ErrorMsgMedDisMisoDis {
            get {
                return ResourceManager.GetString("ErrorMsgMedDisMisoDis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor must be between {0} and {1} when the median filter is enabled..
        /// </summary>
        internal static string ErrorMsgMedMisoDis {
            get {
                return ResourceManager.GetString("ErrorMsgMedMisoDis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer size must be between {0} and maximum available memory in the device..
        /// </summary>
        internal static string ErrorValueLimitBufferSize {
            get {
                return ResourceManager.GetString("ErrorValueLimitBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EZI2C Pins.
        /// </summary>
        internal static string EZI2CAdvancedTabDisplayName {
            get {
                return ResourceManager.GetString("EZI2CAdvancedTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to EZI2C Basic.
        /// </summary>
        internal static string EZI2CBasicTabDisplayName {
            get {
                return ResourceManager.GetString("EZI2CBasicTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external clock frequency must be at least {0} MHz..
        /// </summary>
        internal static string EZI2cExternalClockLowError {
            get {
                return ResourceManager.GetString("EZI2cExternalClockLowError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EZI2C slave address must be between {0} and {1}. Other addresses are not allowed by the I2C spec..
        /// </summary>
        internal static string EZI2CSlaveAddressError {
            get {
                return ResourceManager.GetString("EZI2CSlaveAddressError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary slave address and secondary slave address must not be equal..
        /// </summary>
        internal static string EZI2CSlaveAddressesEqualError {
            get {
                return ResourceManager.GetString("EZI2CSlaveAddressesEqualError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration.
        /// </summary>
        internal static string GeneralTabDisplayName {
            get {
                return ResourceManager.GetString("GeneralTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I2C Pins.
        /// </summary>
        internal static string I2CAdvancedTabDisplayName {
            get {
                return ResourceManager.GetString("I2CAdvancedTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I2C Basic.
        /// </summary>
        internal static string I2CBasicTabDisplayName {
            get {
                return ResourceManager.GetString("I2CBasicTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change I2C mode to Slave or  Multi-Master-Slave..
        /// </summary>
        internal static string I2CChangeMode {
            get {
                return ResourceManager.GetString("I2CChangeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clock frequency is out of recommended range, consult the datasheet for equations used how to calculate 
        ///various I2C parameters to see which if any I2C specs this configuration violates..
        /// </summary>
        internal static string I2CConsultDatasheet {
            get {
                return ResourceManager.GetString("I2CConsultDatasheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external clock frequency must be at least  {0} MHz in the Slave mode..
        /// </summary>
        internal static string I2cExternalClockLowError {
            get {
                return ResourceManager.GetString("I2cExternalClockLowError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I2C instance &apos;{0}&apos; is not configured as Slave or Multi-Master-Slave, but has been chosen as the bootloader IO component..
        /// </summary>
        internal static string I2CNotContainSlave {
            get {
                return ResourceManager.GetString("I2CNotContainSlave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Show I2C terminals option (Pins tab) is not applicable when Master mode is enabled for the selected device..
        /// </summary>
        internal static string I2CShowTerminalsError {
            get {
                return ResourceManager.GetString("I2CShowTerminalsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I2C slave address must be between {0} and {1}. Other addresses are not allowed by the I2C spec..
        /// </summary>
        internal static string I2CSlaveAddressError {
            get {
                return ResourceManager.GetString("I2CSlaveAddressError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The I2C slave address mask must be between {0} and {1}..
        /// </summary>
        internal static string I2CSlaveAddressMaskError {
            get {
                return ResourceManager.GetString("I2CSlaveAddressMaskError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon InformationIconIco {
            get {
                object obj = ResourceManager.GetObject("InformationIconIco", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap InformationIconPng {
            get {
                object obj = ResourceManager.GetObject("InformationIconPng", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid bus voltage. Value must be numeric and non-negative..
        /// </summary>
        internal static string InvalidBusVoltageError {
            get {
                return ResourceManager.GetString("InvalidBusVoltageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Motorola_00 {
            get {
                object obj = ResourceManager.GetObject("Motorola_00", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor must be between {0} and {1}  in the Master mode when MISO is present..
        /// </summary>
        internal static string MsgOvsMasterError {
            get {
                return ResourceManager.GetString("MsgOvsMasterError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor must be between {0} and {1} in the Master mode when MISO is removed..
        /// </summary>
        internal static string MsgOvsMasterNoMosiError {
            get {
                return ResourceManager.GetString("MsgOvsMasterNoMosiError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (None of input/output pins is enabled. Enable at least one pin for valid component configuration).
        /// </summary>
        internal static string NoSignalDescription {
            get {
                return ResourceManager.GetString("NoSignalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No signal.
        /// </summary>
        internal static string NoSignalLabel {
            get {
                return ResourceManager.GetString("NoSignalLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation not allowed.
        /// </summary>
        internal static string OperationNotAllowedTitle {
            get {
                return ResourceManager.GetString("OperationNotAllowedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor must be between {0} and {1}..
        /// </summary>
        internal static string OvsFactorError {
            get {
                return ResourceManager.GetString("OvsFactorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor high must be between {0} and {1}..
        /// </summary>
        internal static string OvsHighError {
            get {
                return ResourceManager.GetString("OvsHighError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sum of the oversampling factor low and high must be equal to the oversampling factor value..
        /// </summary>
        internal static string OvsHighLowOutOfRangeError {
            get {
                return ResourceManager.GetString("OvsHighLowOutOfRangeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor low must be between {0} and {1}..
        /// </summary>
        internal static string OvsLowError {
            get {
                return ResourceManager.GetString("OvsLowError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected slew rate requires a pin with the OVT feature but the selected device does not support OVT..
        /// </summary>
        internal static string OvtNotSupportedError {
            get {
                return ResourceManager.GetString("OvtNotSupportedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RTS RX FIFO level must be between {0} and {1}..
        /// </summary>
        internal static string RtsRxFifoTriggerOutOfRangeError {
            get {
                return ResourceManager.GetString("RtsRxFifoTriggerOutOfRangeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SCB.
        /// </summary>
        internal static string SCBTabDisplayName {
            get {
                return ResourceManager.GetString("SCBTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} mode is not available for the selected device. Select another SCB mode..
        /// </summary>
        internal static string SFModeError {
            get {
                return ResourceManager.GetString("SFModeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SPI and UART mode are not available for the selected device. Launch the SCB configuration dialog and remove the SPI pins or disable the UART RX wake option on the SCB tab..
        /// </summary>
        internal static string SFSettingsDRCError {
            get {
                return ResourceManager.GetString("SFSettingsDRCError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} option is not available for the selected device..
        /// </summary>
        internal static string SFSettingsError {
            get {
                return ResourceManager.GetString("SFSettingsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To enable the Show terminals option, disable the wakeup from Deep Sleep mode on the Basic tab..
        /// </summary>
        internal static string ShowTerminalsWakeUpError {
            get {
                return ResourceManager.GetString("ShowTerminalsWakeUpError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the slave address mask bit1 must be one when wakeup from the deep sleep mode option is enabled for the selected device..
        /// </summary>
        internal static string SlaveAddressMaskBitOneError {
            get {
                return ResourceManager.GetString("SlaveAddressMaskBitOneError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the slave address mask must be even..
        /// </summary>
        internal static string SlaveAddressMaskOddError {
            get {
                return ResourceManager.GetString("SlaveAddressMaskOddError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the slave address must be even when wakeup the from the deep sleep mode option is enabled for the selected device..
        /// </summary>
        internal static string SlaveAddressOddError {
            get {
                return ResourceManager.GetString("SlaveAddressOddError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected slew rate is not applicable when data rate is less or equal to {0}..
        /// </summary>
        internal static string SlewRateDataRateError {
            get {
                return ResourceManager.GetString("SlewRateDataRateError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SmartCard mode is not compatible with the SmartIO support..
        /// </summary>
        internal static string SmartCardSupportSmartioError {
            get {
                return ResourceManager.GetString("SmartCardSupportSmartioError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SPI Advanced.
        /// </summary>
        internal static string SPIAdvancedTabDisplayName {
            get {
                return ResourceManager.GetString("SPIAdvancedTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SPI Basic.
        /// </summary>
        internal static string SPIBasicTabDisplayName {
            get {
                return ResourceManager.GetString("SPIBasicTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MISO pin must be available..
        /// </summary>
        internal static string SPIChangeMisoPin {
            get {
                return ResourceManager.GetString("SPIChangeMisoPin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change SPI mode to Slave..
        /// </summary>
        internal static string SPIChangeMode {
            get {
                return ResourceManager.GetString("SPIChangeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MOSI pin must be available..
        /// </summary>
        internal static string SPIChangeMosiPin {
            get {
                return ResourceManager.GetString("SPIChangeMosiPin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change number of RX data bits to {0}..
        /// </summary>
        internal static string SPIChangeRxDataBits {
            get {
                return ResourceManager.GetString("SPIChangeRxDataBits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SCLK pin must be available..
        /// </summary>
        internal static string SPIChangeSclkPin {
            get {
                return ResourceManager.GetString("SPIChangeSclkPin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change SPI sub mode to Motorola..
        /// </summary>
        internal static string SPIChangeSubMode {
            get {
                return ResourceManager.GetString("SPIChangeSubMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change number of TX data bits to {0}..
        /// </summary>
        internal static string SPIChangeTxDataBits {
            get {
                return ResourceManager.GetString("SPIChangeTxDataBits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SPI Pins.
        /// </summary>
        internal static string SPIPinsTabDisplayName {
            get {
                return ResourceManager.GetString("SPIPinsTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot remove all pins..
        /// </summary>
        internal static string SpiRemoveAllPinsNote {
            get {
                return ResourceManager.GetString("SpiRemoveAllPinsNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SPI SCLK free running is not applicable for the selected device. .
        /// </summary>
        internal static string SpiSclkFreeRunning {
            get {
                return ResourceManager.GetString("SpiSclkFreeRunning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SPI SCLK mode must be set to &quot;CPHA = 0, CPOL = 0&quot; for the selected device..
        /// </summary>
        internal static string SpiSclkMode {
            get {
                return ResourceManager.GetString("SpiSclkMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is the maximum theoretical data rate, to determine the data rate for your system see the datasheet..
        /// </summary>
        internal static string SPISeeDatasheet {
            get {
                return ResourceManager.GetString("SPISeeDatasheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Slave select polarity must be set to Active Low for the selected device..
        /// </summary>
        internal static string SpiSSPolarityError {
            get {
                return ResourceManager.GetString("SpiSSPolarityError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculated THi = {0} ns less than tHigh = {1} ns defined by I2C spec for fSCL = {2} KHz. Increase the oversampling factor high..
        /// </summary>
        internal static string THiError {
            get {
                return ResourceManager.GetString("THiError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calculated TLo = {0} ns less than tLow = {1} ns defined by I2C spec for fSCL = {2} KHz. Increase the oversampling factor low..
        /// </summary>
        internal static string TLoError {
            get {
                return ResourceManager.GetString("TLoError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The trigger level must be in the range between {0} and {1} when the byte mode is disabled..
        /// </summary>
        internal static string TriggerLevelError {
            get {
                return ResourceManager.GetString("TriggerLevelError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value must be between {0} and {1}..
        /// </summary>
        internal static string UARTAddressFormatError {
            get {
                return ResourceManager.GetString("UARTAddressFormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UART Advanced.
        /// </summary>
        internal static string UARTAdvancedTabDisplayName {
            get {
                return ResourceManager.GetString("UARTAdvancedTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The break width must be between {0} and {1}..
        /// </summary>
        internal static string UARTBreakWidthError {
            get {
                return ResourceManager.GetString("UARTBreakWidthError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The buffer size value has an invalid format..
        /// </summary>
        internal static string UARTBufferSizeValueFormatError {
            get {
                return ResourceManager.GetString("UARTBufferSizeValueFormatError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change UART direction to TX + RX..
        /// </summary>
        internal static string UARTChangeDirection {
            get {
                return ResourceManager.GetString("UARTChangeDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change UART mode to Standard..
        /// </summary>
        internal static string UARTChangeMode {
            get {
                return ResourceManager.GetString("UARTChangeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UART Basic.
        /// </summary>
        internal static string UARTConfigTabDisplayName {
            get {
                return ResourceManager.GetString("UARTConfigTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UART control flow is not available for the selected device..
        /// </summary>
        internal static string UARTControlFlowDeviceError {
            get {
                return ResourceManager.GetString("UARTControlFlowDeviceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The UART control flow is available for the selected device only when it is configured in the Standard mode..
        /// </summary>
        internal static string UARTControlFlowError {
            get {
                return ResourceManager.GetString("UARTControlFlowError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CTS pin is not available for the RX only direction..
        /// </summary>
        internal static string UARTCtsPinDirectionError {
            get {
                return ResourceManager.GetString("UARTCtsPinDirectionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The selected mode does not support the {0} value. Set a different data bits value..
        /// </summary>
        internal static string UARTDataBitsValueError {
            get {
                return ResourceManager.GetString("UARTDataBitsValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The oversampling factor must be between {0} and {1}..
        /// </summary>
        internal static string UARTOvsFactorError {
            get {
                return ResourceManager.GetString("UARTOvsFactorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UART Pins.
        /// </summary>
        internal static string UARTPinsTabDisplayName {
            get {
                return ResourceManager.GetString("UARTPinsTabDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RTS pin is not available for the TX only direction..
        /// </summary>
        internal static string UARTRtsPinDirectionError {
            get {
                return ResourceManager.GetString("UARTRtsPinDirectionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When the SmartCard mode is selected, the stop bits value must be 2..
        /// </summary>
        internal static string UARTStopBitsSmartCardError {
            get {
                return ResourceManager.GetString("UARTStopBitsSmartCardError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UART tolerance exceeds recommended maximum of 2.5%..
        /// </summary>
        internal static string UARTToleranceNote {
            get {
                return ResourceManager.GetString("UARTToleranceNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To enable the wakeup from Deep Sleep mode, disable the Show UART terminals on the Pins tab..
        /// </summary>
        internal static string WakeUpSmartIoError {
            get {
                return ResourceManager.GetString("WakeUpSmartIoError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon WarningIco {
            get {
                object obj = ResourceManager.GetObject("WarningIco", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
    }
}
