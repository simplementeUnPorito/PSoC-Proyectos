<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcqTimeErrorDescription" xml:space="preserve">
    <value>Clock value must be between {0} and {1}.</value>
  </data>
  <data name="ChannelsTabDisplayName" xml:space="preserve">
    <value>Channels</value>
  </data>
  <data name="DRCAllChannelsDisabledError" xml:space="preserve">
    <value>At least one input channel must be enabled.</value>
  </data>
  <data name="GeneralTabDisplayName" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="InputBufferGainIncorrectValue" xml:space="preserve">
    <value>Input buffer gain is not supported for current device type.</value>
  </data>
  <data name="InterruptValueError" xml:space="preserve">
    <value>Interrupt limit must be between {0} and {1}.</value>
  </data>
  <data name="NumSeqChannelsErrorDescription" xml:space="preserve">
    <value>Current channels configuration cannot be supported by the device. Decrease number of the sequenced channels or change differential mode to single ended for the channels.</value>
  </data>
  <data name="NumSeqChannelsFormatErrorDescription" xml:space="preserve">
    <value>Number of sequenced channels must be between {0} and {1}.</value>
  </data>
  <data name="SettingsIncorrectValues" xml:space="preserve">
    <value>Settings have incorrect values. You must redefine them.</value>
  </data>
  <data name="VrefSelectIncorrectValue" xml:space="preserve">
    <value>The selected type of voltage reference is not supported for the current device type.</value>
  </data>
  <data name="VrefValueErrorDescription" xml:space="preserve">
    <value>Vref value must be between {0} and {1}.</value>
  </data>
  <data name="ActualClockFrequencyValueErrorDescription" xml:space="preserve">
    <value>Actual clock frequency value must be between {0} MHz and {1} MHz.</value>
  </data>
  <data name="ClockFrequencyErrorMsg" xml:space="preserve">
    <value>Clock frequency value must be between {0} MHz and {1} MHz.</value>
  </data>
  <data name="ClockFrequencyHFCLKErrorMsg" xml:space="preserve">
    <value>Clock frequency value must be less than {0} MHz, half of High Frequency Clock (HFCLK) taken from the Design-Wide Resources (DWR) Clock Editor.</value>
  </data>
  <data name="InvalidReferenceErrorMsg" xml:space="preserve">
    <value>Clock frequency for "{0}" reference must be less than {1} kHz. Please use "{2}, bypassed" for higher clock frequency.</value>
  </data>
  <data name="BuiltInTabDisplayName" xml:space="preserve">
    <value>Built-in</value>
  </data>
  <data name="AveragedChannelResolutionErrorDescription" xml:space="preserve">
    <value>Resolution should be equal to {0} when channel is averaged.</value>
  </data>
  <data name="DRCSampleRateInfo" xml:space="preserve">
    <value>The actual sample rate ({0} SPS) differs from the desired sample rate ({1} SPS) due to the clock configuration in the DWR.</value>
  </data>
  <data name="InterconnectTabDisplayName" xml:space="preserve">
    <value>Interconnect</value>
  </data>
  <data name="SBComponentTitle" xml:space="preserve">
    <value>ADC SAR Seq</value>
  </data>
  <data name="SBComponentBodyText" xml:space="preserve">
    <value>{0}-Channel, {1}Channel sample rate (SPS): {2}</value>
  </data>
  <data name="SBCalcSPSLable" xml:space="preserve">
    <value>Calculating</value>
  </data>
  <data name="ClockTermDescription" xml:space="preserve">
    <value>Analog ADC clock input.</value>
  </data>
  <data name="EOCTermDescription" xml:space="preserve">
    <value>End of Conversion output.</value>
  </data>
  <data name="MinusINJTermDescription" xml:space="preserve">
    <value>Minus Input for the Injection Channel.</value>
  </data>
  <data name="MinusInputTermDescription" xml:space="preserve">
    <value>Minus Input </value>
  </data>
  <data name="PlusINJTermDescription" xml:space="preserve">
    <value>Plus Input for the Injection Channel.</value>
  </data>
  <data name="PlusInputTermDescription" xml:space="preserve">
    <value>Plus Input </value>
  </data>
  <data name="SDONETermDescription" xml:space="preserve">
    <value>Sample Done output.</value>
  </data>
  <data name="SOCTermDescription" xml:space="preserve">
    <value>Start of Conversion input</value>
  </data>
  <data name="VINNEGTermDescription" xml:space="preserve">
    <value>Common negative input reference.</value>
  </data>
  <data name="VREFTermDescription" xml:space="preserve">
    <value>Voltage Reference input</value>
  </data>
  <data name="DebugMsgVddaFail" xml:space="preserve">
    <value>Failed to get VDDA value.</value>
  </data>
  <data name="AvgLeftJustificationError" xml:space="preserve">
    <value>Averaging is not supported for left Data format justification.</value>
  </data>
  <data name="LeftJustificationAvgError" xml:space="preserve">
    <value>Left Data format justification is not compatible with averaging.</value>
  </data>
  <data name="EnumVrefSelect" xml:space="preserve">
    <value>VDDA/2; VDDA; Internal {0} volts; Internal {0} volts, bypassed; Internal Vref; Internal Vref, bypassed; VDDA/2, bypassed; External Vref</value>
  </data>
  <data name="DebugMsgBandgapFail" xml:space="preserve">
    <value>Failed to get a Bandgap Voltage value.</value>
  </data>
</root>