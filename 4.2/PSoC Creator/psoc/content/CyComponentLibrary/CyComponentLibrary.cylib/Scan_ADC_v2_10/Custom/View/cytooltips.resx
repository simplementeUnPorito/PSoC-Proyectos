<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="actAcqTimeToolTip" xml:space="preserve">
    <value>The scheduled acquisition time for this channel, in ns.</value>
  </data>
  <data name="altResolutionToolTip" xml:space="preserve">
    <value>Select the value of the 'alternate' conversion resolution that any channel can utilize.</value>
  </data>
  <data name="averageModeToolTip" xml:space="preserve">
    <value>Select the type of averaging that any channel can utilize if required.</value>
  </data>
  <data name="channelAveragingToolTip" xml:space="preserve">
    <value>Select whether this channel uses averaging.</value>
  </data>
  <data name="channelInputModeToolTip" xml:space="preserve">
    <value>Select either differential or single-ended input mode.</value>
  </data>
  <data name="channelNumberToolTip" xml:space="preserve">
    <value>Channel number. Corresponds to the label on the component symbol.</value>
  </data>
  <data name="channelResolutionToolTip" xml:space="preserve">
    <value>Select whether this channel uses the 'alternate' resolution.</value>
  </data>
  <data name="channelUseLimitIntToolTip" xml:space="preserve">
    <value>Select whether this channel causes a limit compare interrupt.</value>
  </data>
  <data name="channelUseSaturationIntToolTip" xml:space="preserve">
    <value>Select whether this channel causes a saturation interrupt.</value>
  </data>
  <data name="clockToolTip" xml:space="preserve">
    <value>Select whether to use an external clock (adds a terminal to the symbol).</value>
  </data>
  <data name="compareModeToolTip" xml:space="preserve">
    <value>Select how the limit interrupt is triggered, on any channel that utilizes it.</value>
  </data>
  <data name="diffResultFormatToolTip" xml:space="preserve">
    <value>Select whether differential measurements are presented as signed or unsigned values.</value>
  </data>
  <data name="enableChannelToolTip" xml:space="preserve">
    <value>Select whether this channel is enabled.</value>
  </data>
  <data name="filter3dbToolTip" xml:space="preserve">
    <value>Set the filter's {0}cutoff frequency.</value>
    <comment>Use "" (lp, hp, bs), "low " (bp), "high " (bp)</comment>
  </data>
  <data name="filterBandPassF1Label" xml:space="preserve">
    <value>Lower -3 dB point (kHz):</value>
  </data>
  <data name="filterBandPassF2Label" xml:space="preserve">
    <value>Upper -3 dB point (kHz):</value>
  </data>
  <data name="filterBandStopF1Label" xml:space="preserve">
    <value>Notch (kHz):</value>
  </data>
  <data name="filterBandStopF2Label" xml:space="preserve">
    <value>-3 dB (kHz):</value>
  </data>
  <data name="filterHighPassF1Label" xml:space="preserve">
    <value>-3 dB (kHz):</value>
  </data>
  <data name="filterHighPassF2Label" xml:space="preserve">
    <value>Notch (kHz):</value>
  </data>
  <data name="filterLowPassF1Label" xml:space="preserve">
    <value>-3 dB (kHz):</value>
  </data>
  <data name="filterLowPassF2Label" xml:space="preserve">
    <value>Notch (kHz):</value>
  </data>
  <data name="filterNotchToolTip" xml:space="preserve">
    <value>Set the frequency of the filter's notch.</value>
  </data>
  <data name="filterSampleFreqToolTip" xml:space="preserve">
    <value>The filter's sampling rate.</value>
  </data>
  <data name="filterTypeToolTip" xml:space="preserve">
    <value>Select the filter type</value>
  </data>
  <data name="freeRunningToolTip" xml:space="preserve">
    <value>Set the ADC to run continuously once enabled.</value>
  </data>
  <data name="highLimitToolTip" xml:space="preserve">
    <value>Set the upper limit value for comparisons to trigger the Limit interrupt.</value>
  </data>
  <data name="lowLimitToolTip" xml:space="preserve">
    <value>Set the lower limit value for comparisons to trigger the Limit interrupt.</value>
  </data>
  <data name="maxInputResistanceToolTip" xml:space="preserve">
    <value>This is the maximum source resistance at which the channel will convert correctly.</value>
  </data>
  <data name="minAcqTimeToolTip" xml:space="preserve">
    <value>Set the minimum required acquisition time for this channel, in ns.</value>
  </data>
  <data name="numberOfConfigsToolTip" xml:space="preserve">
    <value>Set the number of scan configurations supported. (From {0} to {1})</value>
  </data>
  <data name="oneShotToolTip" xml:space="preserve">
    <value>Set the ADC to wait until triggered to start a conversion.</value>
  </data>
  <data name="sampleClockFreqToolTip" xml:space="preserve">
    <value>Use clock frequency to derive sample rate.</value>
  </data>
  <data name="sampleRateToolTip" xml:space="preserve">
    <value>Target ADC scan rate in complete scans per second.
The achieved scan rate may vary from the target rate.
See datasheet for details of scan rate calculation.</value>
  </data>
  <data name="samplesAvgdToolTip" xml:space="preserve">
    <value>Select number of samples to combine when averaging is used.</value>
  </data>
  <data name="sequencedChannelsToolTip" xml:space="preserve">
    <value>Set the number of channels for this configuration.</value>
  </data>
  <data name="seResultFormatToolTip" xml:space="preserve">
    <value>Select whether single-ended measurements are presented as signed or unsigned values.</value>
  </data>
  <data name="startConversionToolTip" xml:space="preserve">
    <value>Enable the start-of-conversion (soc) terminal.</value>
  </data>
  <data name="useSocToolTip" xml:space="preserve">
    <value>Use the start-of-conversion terminal to begin a scan for this configuration.  The soc terminal is enabled when this box is checked for any configuration.</value>
  </data>
  <data name="vnegSourceToolTip" xml:space="preserve">
    <value>Select the signal to be used as Vneg (ADC inverting input connection) for single-ended conversions in this configuration.</value>
  </data>
  <data name="vrefBypassToolTip" xml:space="preserve">
    <value>Select when using an off-chip bypass capacitor on the device Vref pin (applies to all configurations)</value>
  </data>
  <data name="vrefSourceToolTip" xml:space="preserve">
    <value>Select the source of the voltage to be used as Vref for conversions in this configuration.</value>
  </data>
  <data name="vrefValueToolTip" xml:space="preserve">
    <value>Set the value of a user-supplied voltage applied to Vref for this configuration.</value>
  </data>
  <data name="commonTabName" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="conversionTabName" xml:space="preserve">
    <value>Conversion</value>
  </data>
</root>