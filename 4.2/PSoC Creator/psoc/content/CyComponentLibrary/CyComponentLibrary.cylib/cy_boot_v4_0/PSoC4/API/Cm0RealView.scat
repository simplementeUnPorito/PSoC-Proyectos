#! armcc -E
; The first line specifies a preprocessor command that the linker invokes 
; to pass a scatter file through a C preprocessor.

;********************************************************************************
;* File Name: Cm0RealView.scat
;* Version `$CY_MAJOR_VERSION`.`$CY_MINOR_VERSION`
;*
;*  Description:
;*  This Linker Descriptor file describes the memory layout of the PSOC4 device
;*  family.  The memory layout of the final binary and hex images as well as
;*  the placement in PSOC4 memory is described.
;*
;*
;*  Note:
;*
;*  romvectors: Cypress default Interrupt sevice routine vector table.
;*
;*      This is the ISR vector table at bootup. Used only for the reset vector.
;*
;*
;*  ramvectors: Cypress ram interrupt service routine vector table.
;*
;*      This is the ISR vector table used by the application.
;*
;*
;********************************************************************************
;* Copyright 2010-2013, Cypress Semiconductor Corporation.  All rights reserved.
;* You may use this file only in accordance with the license, terms, conditions,
;* disclaimers, and limitations in the end user license agreement accompanying
;* the software package with which this file was provided.
;********************************************************************************/
#include "cyfitter.h"

#define CY_FLASH_SIZE       `$CYDEV_FLS_SIZE`
#define CY_APPL_ORIGIN      `$USER_REQUEST_FLS_START`
#define CY_FLASH_ROW_SIZE   `$CYDEV_FLS_ROW_SIZE`
#define CY_METADATA_SIZE    64


; Define application base address
#if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLE)

    #if CY_APPL_ORIGIN
        #define APPL1_START     CY_APPL_ORIGIN
    #else
        #define APPL1_START     AlignExpr(ImageLimit(CYBOOTLOADER), CY_FLASH_ROW_SIZE)
    #endif

    #define APPL_START     (APPL1_START + AlignExpr(((CY_FLASH_SIZE - APPL1_START - 2 * CY_FLASH_ROW_SIZE) / 2 ) * (`$CYAPPL_NUM` - 1), CY_FLASH_ROW_SIZE))

#else

    #define APPL_START     0

#endif


; Place Bootloader at the beginning of Flash
#if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLE)

    CYBOOTLOADER 0
    {
        .cybootloader +0
        {
            * (.cybootloader)
        }
    }

    #if CY_APPL_ORIGIN
        ScatterAssert(APPL_START > LoadLimit(CYBOOTLOADER))
    #endif

#endif


APPLICATION APPL_START (CY_FLASH_SIZE - APPL_START)
{
    VECTORS +0
    {
        * (.romvectors)
    }

    RELOCATION +0
    {
        * (.psocinit)
    }

    CODE ((ImageLimit(RELOCATION) < 0x100) ? 0x100 : ImageLimit(RELOCATION)) FIXED
    {
        * (+RO)
    }
    
    ISRVECTORS (0x20000000) UNINIT
    {
        * (.ramvectors, +FIRST)
    }

    #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_STANDARD)
        BTLDR_RUN +0 UNINIT
        {
            * (.bootloaderruntype)
        }
    #endif

    NOINIT_DATA +0 UNINIT
    {
        * (.noinit)
    }

    DATA +`$CY_PSOC4_DATA_OFFSET`
    {
        .ANY (+RW, +ZI)
    }

    ARM_LIB_HEAP (0x20000000 + `$SRAM_BYTES` - `$CYDEV_HEAP_SIZE` - `$CYDEV_STACK_SIZE`) EMPTY `$CYDEV_HEAP_SIZE`
    {
    }

    ARM_LIB_STACK (0x20000000 + `$SRAM_BYTES`) EMPTY -`$CYDEV_STACK_SIZE`
    {
    }
}


#if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_BOOTLOADER || CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)

    CYLOADERMETA (CY_FLASH_SIZE - CY_METADATA_SIZE)
    {
        .cyloadermeta +0 { * (.cyloadermeta) }
    }

#elif (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLE)

    CYLOADABLEMETA (CY_FLASH_SIZE - CY_FLASH_ROW_SIZE * (`$CYAPPL_NUM` - 1) - CY_METADATA_SIZE)
    {
        .cyloadablemeta +0 { * (.cyloadablemeta) }
    }

#endif


CYFLASHPROTECT 0x90400000
{
    .cyflashprotect +0 { * (.cyflashprotect) }
}

CYMETA 0x90500000
{
    .cymeta +0 { * (.cymeta) }
}

CYCHIPPROTECT 0x90600000
{
    .cychipprotect +0 { * (.cychipprotect) }
}

#if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLE)

    CYLOADERMETA +0
    {
        .cyloadermeta +0 { * (.cyloadermeta) }
    }

#endif
