<?xml version="1.0" encoding="us-ascii"?>

<deviceData version="1"
    xmlns="http://cypress.com/xsd/cydevicedata"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://cypress.com/xsd/cydevicedata cydevicedata.xsd">

    <block name="`$INSTANCE_NAME`" desc="" visible="true">

        <block name="GROUP_CSDV2" desc="" visible="true">  
    
            <register address="CYREG_CSD_CONFIG" bitWidth="32" desc="Configuration and Control" name="CONFIG">
              <field access="RW" desc="This value determines the number of cycles that the digital filter makes the CSDCMP output ignored while the counter counts and IDAC is on. &#10;When set to 0 the digital filter is off. When set to any other value the ignoring will last for FILTER_DELAY clk_csd cycles after the start of each measurement and from the first comparator trip to the end of each measurement." from="6" name="FILTER_DELAY" to="4">
                </field>
              <field access="RW" desc="Selects the delay by which csd_shield is delayed relative to csd_sense." from="9" name="SHIELD_DELAY" to="8">
                <value desc="Delay line is off, csd_shield=csd_sense" name="OFF" value="0">
                  </value>
                <value desc="Introduces a 5ns delay (typ)" name="D5NS" value="1">
                  </value>
                <value desc="Introduces a 10ns delay (typ)" name="D10NS" value="10">
                  </value>
                <value desc="Introduces a 20ns delay (typ)" name="D20NS" value="11">
                  </value>
              </field>
              <field access="RW" desc="Enables the sense modulator output. &#10;0: all switches, static or dynamic, are open and IDAC in CSD mode is off&#10;1: switches and IDAC can be closed/on as per MMIO setting and CSD sequencer." from="12" name="SENSE_EN" to="12">
                </field>
              <field access="RW" desc="Enable charging of the Cmod/Csh_tank capacitor using the GPIO digital output buffer using the csd_charge signal.  Note that using the GPIO requires proper configuraiton of the GPIO pin." from="14" name="CHARGE_MODE" to="14">
                <value desc="Use this to keep csd_charge signal low. For charging Cmod/Csh_tank capacitor CSD internal switches (HCBV) can be used but that is a separate configuration." name="CHARGE_OFF" value="0">
                  </value>
                <value desc="Use csd_charge to enable the GPIO Driver to charge capacitor.  The capacitor must be  sensed with HSCMP using the appropriate switches (HMPM or HMPT)." name="CHARGE_IO" value="1">
                  </value>
              </field>
              <field access="RW" desc="Enables mutual cap sensing mode" from="18" name="MUTUAL_CAP" to="18">
                <value desc="Self-cap mode (configure sense line as CSD_SENSE)" name="SELFCAP" value="0">
                  </value>
                <value desc="Mutual-cap mode (configure Tx line as CSD_SENSE, inverted Tx line as CSD_SHIELD and Rx Line as AMUXA). In this mode the polarity bit of the IDAC is controlled by csd_sense." name="MUTUALCAP" value="1">
                  </value>
              </field>
              <field access="RW" desc="Enable the use of two counters for MUTUAL cap sensing mode (CSX), do not use when MUTUAL_CAP=0" from="19" name="CSX_DUAL_CNT" to="19">
                <value desc="Use one counter for both phases (source and sink)." name="ONE" value="0">
                  </value>
                <value desc="Use two counters, separate count for when csd_sense is high and when csd_sense is low." name="TWO" value="1">
                  </value>
              </field>
              <field access="RW" desc="Select what to output  on the dsi_count bus." from="24" name="DSI_COUNT_SEL" to="24">
                <value desc="depending on the dsi_count_val_sel input either output  RESULT_VAL1.VALUE (0) or RESULT_VAL2.VALUE (1) on the dsi_count bus. Note that dsi_count_val_sel is not synchronized, i.e. it controls the mux combinatorially." name="CSD_RESULT" value="0">
                  </value>
                <value desc="output ADC_RES.VIN_CNT on the dsi_count bus" name="ADC_RESULT" value="1">
                  </value>
              </field>
              <field access="RW" desc="Enables the use of the dsi_sample_in input instead of the comparator output to strobe COUNTER." from="25" name="DSI_SAMPLE_EN" to="25">
                </field>
              <field access="RW" desc="Enables double synchronizing of sample input from DSI (only relevant when DSI_SAMPLE_EN=1)." from="26" name="SAMPLE_SYNC" to="26">
                </field>
              <field access="RW" desc="Enables the use of the dsi_sense_in input instead of the internally generated modulation signal to drive csd_sense and csd_shield signals." from="27" name="DSI_SENSE_EN" to="27">
                </field>
              <field access="RW" desc="Select the power mode for the CSD components (REFGEN, AMBUF, CSDCMP, HSCMP):&#10;0: High Power mode&#10;1: Low Power mode" from="30" name="LP_MODE" to="30">
                </field>
              <field access="RW" desc="Master enable of the CSDv2 IP.  Must be set to 1 for any CSDv2, ADC or IDAC operation to function.&#10;When 0 all analog components will be off and all switches will be open." from="31" name="ENABLE" to="31">
                </field>
            </register>
            <register address="CYREG_CSD_SPARE" bitWidth="32" desc="Spare MMIO" name="SPARE">
              <field access="RW" desc="Spare MMIO" from="3" name="SPARE" to="0">
                </field>
            </register>
            <register address="CYREG_CSD_STATUS" bitWidth="32" desc="Status Register" name="STATUS">
              <field access="R" desc="Qualified, and possible inverted value of COMP_OUT that is used to drive GPIO's charging Cmod or Csh_tank." from="0" name="CSD_CHARGE" to="0">
                </field>
              <field access="R" desc="Signal used to drive the Cs switches." from="1" name="CSD_SENSE" to="1">
                </field>
              <field access="R" desc="Output of reference buffer comparator used to charge up Cmod and/or Csh_tank (synchronized)" from="2" name="HSCMP_OUT" to="2">
                <value desc="Vin &lt; Vref" name="C_LT_VREF" value="0">
                  </value>
                <value desc="Vin &gt; Vref" name="C_GT_VREF" value="1">
                  </value>
              </field>
              <field access="R" desc="Output of main sensing comparator (synchronized)" from="3" name="CSDCMP_OUT" to="3">
                </field>
            </register>
            <register address="CYREG_CSD_STAT_SEQ" bitWidth="32" desc="Current Sequencer status" name="STAT_SEQ">
              <field access="R" desc="CSD sequencer state" from="2" name="SEQ_STATE" to="0">
                </field>
              <field access="R" desc="ADC sequencer state (only relevant after SEQ_STATE has reached SAMPLE_NORM and ADC sequencer has started)" from="18" name="ADC_STATE" to="16">
                </field>
            </register>
            <register address="CYREG_CSD_STAT_CNTS" bitWidth="32" desc="Current status counts" name="STAT_CNTS">
              <field access="R" desc="Current number of conversions remaining when in Sample_* states (note that in AutoZero* states the same down counter is reused to count the cycles)" from="15" name="NUM_CONV" to="0">
                </field>
            </register>
            <register address="CYREG_CSD_RESULT_VAL1" bitWidth="32" desc="Result CSD/CSX accumulation counter value 1" name="RESULT_VAL1">
              <field access="R" desc="Accumulated counter value for this result. In case of Mutual cap with two counters (CSX = config.mutual_cap &amp; config.csx_dual_cnt) this counter counts when csd_sense is high." from="15" name="VALUE" to="0">
                </field>
              <field access="R" desc="Number of 'bad' conversion for which the CSD comparator did not trigger within the normal time window, either because Vref was not crossed at all, or if the Vref was already crossed before the window started. This counter is reset when the sequencer is started and will saturate at 255 when more than 255 conversions are bad." from="23" name="BAD_CONVS" to="16">
                </field>
            </register>
            <register address="CYREG_CSD_RESULT_VAL2" bitWidth="32" desc="Result CSX accumulation counter value 2" name="RESULT_VAL2">
              <field access="R" desc="Only used in case of Mutual cap with two counters (CSX = config.mutual_cap &amp; config.csx_dual_cnt), this counter counts when csd_sense is low." from="15" name="VALUE" to="0">
                </field>
            </register>
            <register address="CYREG_CSD_ADC_RES" bitWidth="32" desc="ADC measurement" name="ADC_RES">
              <field access="R" desc="Count to source/sink Cref1 + Cref2 from Vin to Vrefhi. This is also the current counter value for the HSCMP counter" from="15" name="VIN_CNT" to="0">
                </field>
              <field access="R" desc="Polarity used for IDACB for this last ADC result, 0= source, 1= sink" from="16" name="HSCMP_POL" to="16">
                </field>
              <field access="R" desc="This flag is set when the ADC counter overflows. This is an indication to the firmware that the IDACB current level is too low." from="30" name="ADC_OVERFLOW" to="30">
                </field>
              <field access="R" desc="This flag is set when the ADC sequencer was aborted before tripping HSCMP." from="31" name="ADC_ABORT" to="31">
                </field>
            </register>
            <register address="CYREG_CSD_INTR" bitWidth="32" desc="CSD Interrupt Request Register" name="INTR">
              <field access="RW" desc="A normal sample is complete (CSDv1 compatible interrupt)" from="1" name="SAMPLE" to="1">
                </field>
              <field access="RW" desc="Coarse initialization complete or Sample initialization complete (the latter is typically ignored)" from="2" name="INIT" to="2">
                </field>
              <field access="RW" desc="ADC Result ready" from="8" name="ADC_RES" to="8">
                </field>
            </register>
            <register address="CYREG_CSD_INTR_SET" bitWidth="32" desc="CSD Interrupt set register" name="INTR_SET">
              <field access="RW" desc="Write with '1' to set corresponding bit in interrupt request register." from="1" name="SAMPLE" to="1">
                </field>
              <field access="RW" desc="Write with '1' to set corresponding bit in interrupt request register." from="2" name="INIT" to="2">
                </field>
              <field access="RW" desc="Write with '1' to set corresponding bit in interrupt request register." from="8" name="ADC_RES" to="8">
                </field>
            </register>
            <register address="CYREG_CSD_INTR_MASK" bitWidth="32" desc="CSD Interrupt mask register" name="INTR_MASK">
              <field access="RW" desc="Mask bit for corresponding bit in interrupt request register." from="1" name="SAMPLE" to="1">
                </field>
              <field access="RW" desc="Mask bit for corresponding bit in interrupt request register." from="2" name="INIT" to="2">
                </field>
              <field access="RW" desc="Mask bit for corresponding bit in interrupt request register." from="8" name="ADC_RES" to="8">
                </field>
            </register>
            <register address="CYREG_CSD_INTR_MASKED" bitWidth="32" desc="CSD Interrupt masked register" name="INTR_MASKED">
              <field access="R" desc="Logical and of corresponding request and mask bits." from="1" name="SAMPLE" to="1">
                </field>
              <field access="R" desc="Logical and of corresponding request and mask bits." from="2" name="INIT" to="2">
                </field>
              <field access="R" desc="Logical and of corresponding request and mask bits." from="8" name="ADC_RES" to="8">
                </field>
            </register>
            <register address="CYREG_CSD_HSCMP" bitWidth="32" desc="High Speed Comparator configuration" name="HSCMP">
              <field access="RW" desc="High Speed Comparator enable" from="0" name="HSCMP_EN" to="0">
                <value desc="Disable comparator, output is zero" name="OFF" value="0">
                  </value>
                <value desc="On, regular operation. Note that CONFIG.LP_MODE determines the power mode level" name="ON" value="1">
                  </value>
              </field>
              <field access="RW" desc="Invert the HSCMP output before it is used to control switches and the CSD sequencer. This bit does not affect the ADC sequencer or the STATUS.HSCMP_OUT" from="4" name="HSCMP_INVERT" to="4">
                </field>
              <field access="RW" desc="Auto-Zero enable, allow the Sequencer to Auto-Zero this component" from="31" name="AZ_EN" to="31">
                </field>
            </register>
            <register address="CYREG_CSD_AMBUF" bitWidth="32" desc="Reference Generator configuration" name="AMBUF">
              <field access="RW" desc="Amux buffer power level" from="1" name="PWR_MODE" to="0">
                <value desc="Disable buffer" name="OFF" value="0">
                  </value>
                <value desc="On, normal or low power level depending on CONFIG.LP_MODE." name="NORM" value="1">
                  </value>
                <value desc="On, high or low power level depending on CONFIG.LP_MODE." name="HI" value="10">
                  </value>
              </field>
            </register>
            <register address="CYREG_CSD_REFGEN" bitWidth="32" desc="Reference Generator configuration" name="REFGEN">
              <field access="RW" desc="Reference Generator Enable" from="0" name="REFGEN_EN" to="0">
                <value desc="Disable Reference Generator" name="OFF" value="0">
                  </value>
                <value desc="On, regular operation. Note that CONFIG.LP_MODE determines the power mode level" name="ON" value="1">
                  </value>
              </field>
              <field access="RW" desc="Bypass selected input reference unbuffered to Vrefhi" from="4" name="BYPASS" to="4">
                </field>
              <field access="RW" desc="Close Vdda switch to top of resistor string (or Vrefhi?)" from="5" name="VDDA_EN" to="5">
                </field>
              <field access="RW" desc="Resistor string enable; 0= open switch on top of the resistor string (Vreflo=Vssa)" from="6" name="RES_EN" to="6">
                </field>
              <field access="RW" desc="Select resistor string tap for feedback, 0= minimum vout, 31= maximum vout = vrefhi -&gt; gain=1  (only works if the resistor string is enabled; RES_EN=1)" from="12" name="GAIN" to="8">
                </field>
              <field access="RW" desc="Select resistor string tap for Vreflo/Vreflo_int, 0= minimum vout, 31= maximum vout = vrefhi (only works if the resistor string is enabled; RES_EN=1)" from="20" name="VREFLO_SEL" to="16">
                </field>
              <field access="RW" desc="Ouput the resistor string tap either to Vreflo (0) or Vreflo_int (1)." from="23" name="VREFLO_INT" to="23">
                </field>
            </register>
            <register address="CYREG_CSD_CSDCMP" bitWidth="32" desc="CSD Comparator configuration" name="CSDCMP">
              <field access="RW" desc="CSD Comparator Enable" from="0" name="CSDCMP_EN" to="0">
                <value desc="Disable comparator, output is zero" name="OFF" value="0">
                  </value>
                <value desc="On, regular operation. Note that CONFIG.LP_MODE determines the power mode level" name="ON" value="1">
                  </value>
              </field>
              <field access="RW" desc="Select which IDAC polarity to use to detect CSDCMP triggering" from="5" name="POLARITY_SEL" to="4">
                <value desc="Use idaca_pol (firmware setting with CSX and optionally DSI mixed in) to determine the direction, this is the most common use-case, used for normal CSD and normal CSX" name="IDACA_POL" value="0">
                  </value>
                <value desc="Use idacb_pol (firmware setting with optional DSI mixed in) to determine the direction, this is only used for normal CSD if IDACB is used i.s.o. IDACA (not common)" name="IDACB_POL" value="1">
                  </value>
                <value desc="Use the expression (csd_sense ? idaca_pol : idacb_pol)  to determine the direction, this is only useful for the CSX with DUAL_IDAC use-case" name="DUAL_POL" value="10">
                  </value>
              </field>
              <field access="RW" desc="Select in what phase(s) the comparator is active. Note, this also determines when a bad conversion is detected, namely at the beginning and end of the comparator active phase (also taking into account FILTER_DELAY and non-overlap)." from="9" name="CMP_PHASE" to="8">
                <value desc="Comparator is active from start of Phi2 and kept active into Phi1. Intended usage: legacy CSD for balancing over a full csd_sense period (non-overlap should be turned off)" name="FULL" value="0">
                  </value>
                <value desc="Comparator is active during Phi1 only. Currently no known use-case." name="PHI1" value="1">
                  </value>
                <value desc="Comparator is active during Phi2 only. Intended usage: CSD Low EMI." name="PHI2" value="10">
                  </value>
                <value desc="Comparator is activated at the start of both Phi1 and Phi2 (non-overlap should be enabled). Intended usage: CSX, or Full-Wave." name="PHI1_2" value="11">
                  </value>
              </field>
              <field access="RW" desc="Select which signal to output on dsi_sample_out." from="28" name="CMP_MODE" to="28">
                <value desc="CSD mode: output the filtered sample signal on dsi_sample_out" name="CSD" value="0">
                  </value>
                <value desc="General Purpose mode: output the unfiltered sample unfiltered comparator output, either asynchronous or flopped." name="GP" value="1">
                  </value>
              </field>
              <field access="RW" desc="This bit controls whether the output directly from the comparator (csdcmp_out) or the flopped version (csdcmp_out_ff) is used. For CSD operation, the selected signal controls the IDAC(s), in GP mode the signal goes out on dsi_sample_out." from="29" name="FEEDBACK_MODE" to="29">
                <value desc="Use feedback from sampling flip-flop (used in most modes)." name="FLOP" value="0">
                  </value>
                <value desc="Use feedback from comparator directly (used in single Cmod mutual cap sensing only)" name="COMP" value="1">
                  </value>
              </field>
              <field access="RW" desc="Auto-Zero enable, allow the Sequencer to Auto-Zero this component" from="31" name="AZ_EN" to="31">
                </field>
            </register>
            <register address="CYREG_CSD_IDACA" bitWidth="32" desc="IDACA Configuration" name="IDACA">
              <field access="RW" desc="Current value setting for this IDAC (7 bits)." from="6" name="VAL" to="0">
                </field>
              <field access="RW" desc="Polarity is dynamic, this bit does not influence the logic in the SoftIP, it only goes to the HardIP." from="7" name="POL_DYN" to="7">
                <value desc="Static polarity. Polarity is expected to be stable, so to save power this avoids the shunting of the unused polarity, at the expense of response time." name="STATIC" value="0">
                  </value>
                <value desc="Dynamic polarity. Polarity is expected to change frequently (e.g. invert after every csd_sense phase), so to improve response time this keeps the shunt of the unused polarity on at the expense of power." name="DYNAMIC" value="1">
                  </value>
              </field>
              <field access="RW" desc="Selects the polarity of the IDAC (sensing operation). Normally the actual polarity depends on this bit, optionally mixed with DSI (see DSI_CTRL_EN) and if LEG1_MODE==CSD also mixed with the CSD configuration and operation. However in mutual cap mode with one IDAC (config.mutual_cap=1 &amp; config.csx_dual_idac=0) the polarity of the IDAC is controlled by csd_sense." from="9" name="POLARITY" to="8">
                <value desc="Normal: switch between Vssa and Cmod.  For non-CSD application, IDAC will source current." name="VSSA_SRC" value="0">
                  </value>
                <value desc="Inverted: switch between Vdda and Cmod. For non-CSD application, IDAC will sink current." name="VDDA_SNK" value="1">
                  </value>
                <value desc="The polarity of the IDAC will follow the csd_sense signal (POL_DYN bit should be set too). The intended usage is for CSX using a single IDAC." name="SENSE" value="10">
                  </value>
                <value desc="The polarity of the IDAC will follow the inverted csd_sense signal (POL_DYN bit should be set too). The intended usage is for CSX using a single IDAC." name="SENSE_INV" value="11">
                  </value>
              </field>
              <field access="RW" desc="Balancing mode: only applies to legs configured as CSD." from="11" name="BAL_MODE" to="10">
                <value desc="enabled from start of Phi2 until disabled by CSDCMP. Intended usage: legacy CSD for balancing over a full csd_sense period (non-overlap should be turned off)" name="FULL" value="0">
                  </value>
                <value desc="enabled from start of Phi1 and disabled by CSDCMP or at end of Phi1. Enables dual IDAC CSX or Full-Wave, one for sourcing and the other for sinking." name="PHI1" value="1">
                  </value>
                <value desc="enabled from start of Phi2 and disabled by CSDCMP or at end of Phi2. Intended usage: CSD Low EMI or  dual IDAC CSX or Full-Wave." name="PHI2" value="10">
                  </value>
                <value desc="enabled from start of both Phi1 and Phi2 and disabled by CSDCMP or at end of Phi1 or Phi2 (if non-overlap enabled). Intended usage: single IDAC CSX, or Full-Wave." name="PHI1_2" value="11">
                  </value>
              </field>
              <field access="RW" desc="Controls the usage mode of LEG1 and the Polarity bit" from="17" name="LEG1_MODE" to="16">
                <value desc="General Purpose static mode: LEG1 and POLARITY are controlled by MMIO and optionally mixed with DSI (see DSI_CTRL_EN). No shunting is used, this saves power when off but also any on/off switching will take longer." name="GP_STATIC" value="0">
                  </value>
                <value desc="General Purpose dynamic mode: LEG1 and POLARITY are controlled by MMIO and optionally mixed with DSI (see DSI_CTRL_EN). Shunting is used, so on/off switching is faster, but power is wasted when the leg is disabled." name="GP" value="1">
                  </value>
                <value desc="CSD static mode: LEG1 can only be on when the CSD Sequencer is in the Sample_init or Sample_norm state. In those states LEG1 is controlled by LEG1_EN, csd_sense and the CSD configuration. Polarity is controlled by the CSD configuration and operation. In addition leg1 enable and polarity can optionally be mixed with DSI (see DSI_CTRL_EN). No shunting is used, this saves power when off but also any on/off switching will take longer." name="CSD_STATIC" value="10">
                  </value>
                <value desc="CSD dynamic mode: LEG1 can only be on when the CSD Sequencer is in the Sample_init or Sample_norm state. In thoses states LEG1 is controlled by LEG1_EN, the CSD configuration, csd_sense and the flopped CSDCMP output (CSDCMP_OUT_FF). Polarity is controlled by the CSD configuration and operation. In addition leg1 enable and polarity can optionally be mixed with DSI (see DSI_CTRL_EN). Shunting is used, so on/off switching is faster, but power is wasted when the leg is disabled." name="CSD" value="11">
                  </value>
              </field>
              <field access="RW" desc="Controls the usage mode of LEG2" from="19" name="LEG2_MODE" to="18">
                <value desc="General Purpose static mode: LEG2 is controlled by MMIO and optionally mixed with DSI (see DSI_CTRL_EN).  No shunting is used, this saves power when off but also any on/off switching will take longer." name="GP_STATIC" value="0">
                  </value>
                <value desc="General Purpose dynamic mode: LEG2 is controlled by MMIO and optionally mixed with DSI (see DSI_CTRL_EN). Shunting is used, so on/off switching is faster, but power is wasted when the leg is disabled." name="GP" value="1">
                  </value>
                <value desc="CSD static mode: LEG2 can only be on when the CSD Sequencer is in the Sample_init or Sample_norm state. In those states LEG2 is controlled by LEG2_EN, csd_sense and the CSD configuration. Polarity is controlled by the CSD configuration and operation. In addition leg2 enable and polarity can optionally be mixed with DSI (see DSI_CTRL_EN). No shunting is used, this saves power when off but also any on/off switching will take longer." name="CSD_STATIC" value="10">
                  </value>
                <value desc="CSD dynamic mode: LEG2 can only be on when the CSD Sequencer is in the Sample_init or Sample_norm state. In those states LEG2 is controlled by LEG2_EN, the CSD configuration, csd_sense and the flopped CSDCMP output (CSDCMP_OUT_FF). In addition leg2 enable can optionally be mixed with DSI (see DSI_CTRL_EN). Shunting is used, so on/off switching is faster, but power is wasted when the leg is disabled." name="CSD" value="11">
                  </value>
              </field>
              <field access="RW" desc="Mix DSI inputs with MMIO controls or not (before getting mixed with CSD controls if enabled).&#10;0: no DSI control &#10;     IDACA_POLARITY = IDACA.POLARITY &#10;     IDACA_LEG1_EN =  IDACA.LEG1_EN &#10;     IDACA_LEG2_EN = IDACA.LEG2_EN   &#10;1: Mix MMIO with DSI control&#10;     IDACA_POLARITY = IDACA.POLARITY EXOR dsi_idaca_pol&#10;     IDACA_LEG1_EN =  IDACA.LEG1_EN AND dsi_idaca_leg1_en &#10;     IDACA_LEG2_EN = IDACA.LEG2_EN AND dsi_idaca_leg2_en" from="21" name="DSI_CTRL_EN" to="21">
                </field>
              <field access="RW" desc="IDAC multiplier" from="23" name="RANGE" to="22">
                <value desc="1 LSB =   37.5 nA" name="IDAC_LO" value="0">
                  </value>
                <value desc="1 LSB =  300 nA" name="IDAC_MED" value="1">
                  </value>
                <value desc="1 LSB = 2400 nA" name="IDAC_HI" value="10">
                  </value>
              </field>
              <field access="RW" desc="output enable for leg 1 to CSDBUSA" from="24" name="LEG1_EN" to="24">
                </field>
              <field access="RW" desc="output enable for leg 2 to CSDBUSA" from="25" name="LEG2_EN" to="25">
                </field>
            </register>
            <register address="CYREG_CSD_IDACB" bitWidth="32" desc="IDACB Configuration" name="IDACB">
              <field access="RW" desc="Current value setting for this IDAC (7 bits)." from="6" name="VAL" to="0">
                </field>
              <field access="RW" desc="Polarity is dynamic, this bit does not influence the logic in the SoftIP, it only goes to the HardIP." from="7" name="POL_DYN" to="7">
                <value desc="Static polarity. Polarity is expected to be stable, so to save power this avoids the shunting of the unused polarity, at the expense of response time." name="STATIC" value="0">
                  </value>
                <value desc="Dynamic polarity. Polarity is expected to change frequently (e.g. invert after every csd_sense phase), so to improve response time this keeps the shunt of the unused polarity on at the expense of power." name="DYNAMIC" value="1">
                  </value>
              </field>
              <field access="RW" desc="Selects the polarity of the IDAC (sensing operation). Normally the actual polarity depends on this bit, optionally mixed with DSI (see DSI_CTRL_EN) and if LEG1_EN==1 and LEG1_MODE==CSD also mixed with the CSD configuration and operation. In mutual cap mode however (see config.mutual_cap) the polarity of the IDAC is controlled by csd_sense. If LEG3_EN=1 (the other two legs must be off) then the ADC sequencer controls the IDACB polarity, optionally mixed with DSI." from="9" name="POLARITY" to="8">
                <value desc="Normal: switch between Vssa and Cmod.  For non-CSD application, IDAC will source current." name="VSSA_SRC" value="0">
                  </value>
                <value desc="Inverted: switch between Vdda and Cmod. For non-CSD application, IDAC will sink current." name="VDDA_SNK" value="1">
                  </value>
                <value desc="The polarity of the IDAC will follow the csd_sense signal (POL_DYN bit should be set too). The intended usage is for CSX using a single IDAC." name="SENSE" value="10">
                  </value>
                <value desc="The polarity of the IDAC will follow the inverted csd_sense signal (POL_DYN bit should be set too). The intended usage is for CSX using a single IDAC." name="SENSE_INV" value="11">
                  </value>
              </field>
              <field access="RW" desc="same as corresponding IDACA Balancing mode" from="11" name="BAL_MODE" to="10">
                <value desc="same as corresponding IDACA Balancing mode" name="FULL" value="0">
                  </value>
                <value desc="same as corresponding IDACA Balancing mode" name="PHI1" value="1">
                  </value>
                <value desc="same as corresponding IDACA Balancing mode" name="PHI2" value="10">
                  </value>
                <value desc="same as corresponding IDACA Balancing mode" name="PHI1_2" value="11">
                  </value>
              </field>
              <field access="RW" desc="Controls the usage mode of LEG1 and the Polarity bit" from="17" name="LEG1_MODE" to="16">
                <value desc="same as corresponding IDACA.LEG1_MODE" name="GP_STATIC" value="0">
                  </value>
                <value desc="same as corresponding IDACA.LEG1_MODE" name="GP" value="1">
                  </value>
                <value desc="same as corresponding IDACA.LEG1_MODE" name="CSD_STATIC" value="10">
                  </value>
                <value desc="same as corresponding IDACA.LEG1_MODE" name="CSD" value="11">
                  </value>
              </field>
              <field access="RW" desc="Controls the usage mode of LEG2" from="19" name="LEG2_MODE" to="18">
                <value desc="same as corresponding IDACA.LEG2_MODE" name="GP_STATIC" value="0">
                  </value>
                <value desc="same as corresponding IDACA.LEG2_MODE" name="GP" value="1">
                  </value>
                <value desc="same as corresponding IDACA.LEG2_MODE" name="CSD_STATIC" value="10">
                  </value>
                <value desc="same as corresponding IDACA.LEG2_MODE" name="CSD" value="11">
                  </value>
              </field>
              <field access="RW" desc="Mix DSI inputs with MMIO controls or not (before getting mixed with CSD controls if enabled)&#10;0: no DSI control&#10;     IDACB_POLARITY = IDACB.POLARITY &#10;     IDACB_LEG1_EN =  IDACB.LEG1_EN &#10;     IDACB_LEG2_EN = IDACB.LEG2_EN   &#10;     IDACB_LEG3_EN = IDACB.LEG3_EN   &#10;1: Mix MMIO with DSI control&#10;     IDACB_POLARITY = IDACB.POLARITY EXOR dsi_idacb_pol&#10;     IDACB_LEG1_EN =  IDACB.LEG1_EN AND dsi_idacb_leg1_en &#10;     IDACB_LEG2_EN = IDACB.LEG2_EN AND dsi_idacb_leg2_en  &#10;     IDACB_LEG3_EN = IDACB.LEG3_EN AND dsi_idacb_leg3_en" from="21" name="DSI_CTRL_EN" to="21">
                </field>
              <field access="RW" desc="IDAC multiplier" from="23" name="RANGE" to="22">
                <value desc="1 LSB =   37.5 nA" name="IDAC_LO" value="0">
                  </value>
                <value desc="1 LSB =  300 nA" name="IDAC_MED" value="1">
                  </value>
                <value desc="1 LSB = 2400 nA" name="IDAC_HI" value="10">
                  </value>
              </field>
              <field access="RW" desc="output enable for leg 1 to CSDBUSB or CSDBUSA" from="24" name="LEG1_EN" to="24">
                </field>
              <field access="RW" desc="output enable for leg 2 to CSDBUSB or CSDBUSA" from="25" name="LEG2_EN" to="25">
                </field>
              <field access="RW" desc="output enable for leg3 to CSDBUSC, only allowed when RANGE = IDAC_LO. When this bit is set both other legs should be off.&#10;Note that leg3 can only be used for ADC mode, not GP mode. Which means that leg3 can only be on when the ADC Sequencer is in the ADC_measure or Calib_measure state. In those states  leg3 is controlled by the ADC configuration and the HSCMP output. In addition this leg3 enable bit can optionally be mixed with DSI (see DSI_CTRL_EN).&#10;When LEG3_EN=1 also the IDACB polarity is controlled by the ADC sequencer." from="26" name="LEG3_EN" to="26">
                </field>
            </register>
            <register address="CYREG_CSD_SENSE_PERIOD" bitWidth="32" desc="Sense clock period" name="SENSE_PERIOD">
              <field access="RW" desc="The length-1 of the Sense modulation 'clock' period in clk_csd cycles. For regular CSD one sense clock cycle = one conversion (=phi1+phi2) .&#10;Note this is the base divider, clock dithering may change the actual period length.&#10;Note that SENSE_DIV must be at least 1 and additionally also allow for one clk_hf of non overlap on both phases, i.e. if clk_csd=clk_hf then SENSE_DIV must be &gt;=3." from="11" name="SENSE_DIV" to="0">
                </field>
              <field access="RW" desc="Selects the number of bits to be used in the LSFR to provide the clock dithering variation on the base period (was PRS in CSDv1). Whenever the LFSR is used (non zero value in this field) the LFSR_CLEAR bit should also be set." from="18" name="LFSR_SIZE" to="16">
                <value desc="Don't use clock dithering (=spreadspectrum) (LFSR output value is zero)" name="OFF" value="0">
                  </value>
                <value desc="2-bit LFSR (G(x)=X^2+X+1, period= 3), range [-1, 1]" name="2B" value="1">
                  </value>
                <value desc="3-bit LFSR (G(x)=X^3+X+1, period= 7), range [-3, 3]" name="3B" value="10">
                  </value>
                <value desc="4-bit LFSR (G(x)=X^4+X+1, period= 15), range [-7, 7]" name="4B" value="11">
                  </value>
                <value desc="5-bit LFSR (G(x)=X^5+X^2+1, period= 31), range [-15, 15]" name="5B" value="100">
                  </value>
                <value desc="8-bit LFSR (G(x)=X^8+X^4+X^3+X^2+1, period= 255)" name="8B" value="101">
                  </value>
                <value desc="12-bit LFSR (G(x)=X^12+X^9+X^3+X^2+1, period=4095)" name="12B" value="110">
                  </value>
              </field>
              <field access="RW" desc="Shift the LFSR output left by LSFR_SCALE bits before adding to SENSE_DIV. This dithering is disabled when SEL_LSFR_MSB is set.&#10;The clock divider to be used = (SENSE_DIV+1) + (SEL_LSFR_MSB ? 0 : (LFSR_OUT&lt;&lt;LFSR_SCALE)).&#10;Note that the clock divider including the dithering term must fit in 12 bits, otherwise the result is undefined." from="23" name="LFSR_SCALE" to="20">
                </field>
              <field access="RW" desc="When set, forces the LFSR to it's initial state (all ones).  This bit is automatically cleared by hardware after the LFSR is cleared, which is at the next clk_csd positive edge. This bit should be set whenever this register is written and the LFSR is used.&#10;Note that the LFSR will also get reset to all ones during the AutoZero_1/2 states." from="24" name="LFSR_CLEAR" to="24">
                </field>
              <field access="RW" desc="Use the MSB of configured LSFR size as csd_sense signal. Intended to be used only with bit 8 or 12-bit LFSR size for CSDv1 backward compatibility (PRS). When this bit is set then clock divider dithering is disabled." from="25" name="SEL_LFSR_MSB" to="25">
                </field>
            </register>
            <register address="CYREG_CSD_SENSE_DUTY" bitWidth="32" desc="Sense clock duty cycle" name="SENSE_DUTY">
              <field access="RW" desc="Defines the length of the first phase of the sense clock in clk_csd cycles. &#10;A value of 0 disables this feature and the duty cycle of csd_sense will be 50%, which is equal to SENSE_WIDTH = (SENSE_DIV+1)/2, or when clock dithering is used that becomes [(SENSE_DIV+1) + (LFSR_OUT &lt;&lt; LSFR_SCALE)]/2.  At all times it must be assured that the phases are at least 2 clk_csd cycles (1 for non overlap), if this rule is violated the result is undefined." from="11" name="SENSE_WIDTH" to="0">
                </field>
              <field access="RW" desc="Polarity of the sense clock&#10;0 = start with low phase (typical for regular negative transfer CSD)&#10;1 = start with high phase" from="16" name="SENSE_POL" to="16">
                </field>
              <field access="RW" desc="NonOverlap or not for Phi1 (csd_sense=0).&#10;0 = Non-overlap for Phi1, the Phi1 signal is  csd_sense inverted except that the signal goes low 1 clk_sample before csd_sense goes high. Intended usage: new low EMI CSD/CSX with static GPIO.&#10;1 = 'Overlap' (= not non-overlap) for Phi1, the Phi1 signal is  csd_sense inverted. Intended usage: legacy CSD with GPIO switching, the GPIO internal circuit ensures that the switches are non-overlapping." from="18" name="OVERLAP_PHI1" to="18">
                </field>
              <field access="RW" desc="Same as OVERLAP_PHI1 but for Phi2 (csd_sense=1)." from="19" name="OVERLAP_PHI2" to="19">
                </field>
            </register>
            <register address="CYREG_CSD_SW_HS_P_SEL" bitWidth="32" desc="HSCMP Pos input switch Waveform selection" name="SW_HS_P_SEL">
              <field access="RW" desc="Set HMPM switch&#10;0: static open&#10;1: static closed" from="0" name="SW_HMPM" to="0">
                </field>
              <field access="RW" desc="Set corresponding switch" from="4" name="SW_HMPT" to="4">
                </field>
              <field access="RW" desc="Set corresponding switch" from="8" name="SW_HMPS" to="8">
                </field>
              <field access="RW" desc="Set corresponding switch" from="12" name="SW_HMMA" to="12">
                </field>
              <field access="RW" desc="Set corresponding switch" from="16" name="SW_HMMB" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="20" name="SW_HMCA" to="20">
                </field>
              <field access="RW" desc="Set corresponding switch" from="24" name="SW_HMCB" to="24">
                </field>
              <field access="RW" desc="Set corresponding switch" from="28" name="SW_HMRH" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_HS_N_SEL" bitWidth="32" desc="HSCMP Neg input switch Waveform selection" name="SW_HS_N_SEL">
              <field access="RW" desc="Set corresponding switch" from="16" name="SW_HCCC" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="20" name="SW_HCCD" to="20">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="26" name="SW_HCRH" to="24">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="30" name="SW_HCRL" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_SHIELD_SEL" bitWidth="32" desc="Shielding switches Waveform selection" name="SW_SHIELD_SEL">
              <field access="RW" desc="Select waveform for HMPM switch&#10;0: static open&#10;1: static closed&#10;2: phi1&#10;3: phi2&#10;4: phi1 &amp; HSCMP&#10;5: phi2 &amp; HSCMP&#10;6: HSCMP (ignores phi1/2)&#10;7: Reserved" from="2" name="SW_HCAV" to="0">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="6" name="SW_HCAG" to="4">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch. Note that the waveform for this switch follows the csd_shield signal, i.e. phi1 and phi2 are always delayed by 1 clk_hf cycle w.r.t. the csd_sense phases used for all other switches." from="10" name="SW_HCBV" to="8">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch. Note that the waveform for this switch follows the csd_shield signal, i.e. phi1 and phi2 are always delayed by 1 clk_hf cycle w.r.t. the csd_sense phases used for all other switches." from="14" name="SW_HCBG" to="12">
                </field>
              <field access="RW" desc="Set corresponding switch" from="16" name="SW_HCCV" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch&#10;If the ADC is enabled then this switch is directly controlled by the ADC sequencer." from="20" name="SW_HCCG" to="20">
                </field>
            </register>
            <register address="CYREG_CSD_SW_AMUXBUF_SEL" bitWidth="32" desc="Amuxbuffer switches Waveform selection" name="SW_AMUXBUF_SEL">
              <field access="RW" desc="Set corresponding switch" from="4" name="SW_IRBY" to="4">
                </field>
              <field access="RW" desc="Set corresponding switch" from="8" name="SW_IRLB" to="8">
                </field>
              <field access="RW" desc="Set corresponding switch" from="12" name="SW_ICA" to="12">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="18" name="SW_ICB" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="20" name="SW_IRLI" to="20">
                </field>
              <field access="RW" desc="Set corresponding switch" from="24" name="SW_IRH" to="24">
                </field>
              <field access="RW" desc="Set corresponding switch" from="28" name="SW_IRL" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_BYP_SEL" bitWidth="32" desc="AMUXBUS bypass switches Waveform selection" name="SW_BYP_SEL">
              <field access="RW" desc="Set corresponding switch" from="12" name="SW_BYA" to="12">
                </field>
              <field access="RW" desc="Set corresponding switch" from="16" name="SW_BYB" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch&#10;If the ADC is enabled then this switch is directly controlled by the ADC sequencer." from="20" name="SW_CBCC" to="20">
                </field>
            </register>
            <register address="CYREG_CSD_SW_CMP_P_SEL" bitWidth="32" desc="CSDCMP Pos Switch Waveform selection" name="SW_CMP_P_SEL">
              <field access="RW" desc="Select waveform for corresponding switch" from="2" name="SW_SFPM" to="0">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="6" name="SW_SFPT" to="4">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="10" name="SW_SFPS" to="8">
                </field>
              <field access="RW" desc="Set corresponding switch" from="12" name="SW_SFMA" to="12">
                </field>
              <field access="RW" desc="Set corresponding switch" from="16" name="SW_SFMB" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="20" name="SW_SFCA" to="20">
                </field>
              <field access="RW" desc="Set corresponding switch" from="24" name="SW_SFCB" to="24">
                </field>
            </register>
            <register address="CYREG_CSD_SW_CMP_N_SEL" bitWidth="32" desc="CSDCMP Neg Switch Waveform selection" name="SW_CMP_N_SEL">
              <field access="RW" desc="Select waveform for corresponding switch" from="26" name="SW_SCRH" to="24">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="30" name="SW_SCRL" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_REFGEN_SEL" bitWidth="32" desc="Reference Generator Switch Waveform selection" name="SW_REFGEN_SEL">
              <field access="RW" desc="Set corresponding switch" from="0" name="SW_IAIB" to="0">
                </field>
              <field access="RW" desc="Set corresponding switch" from="4" name="SW_IBCB" to="4">
                </field>
              <field access="RW" desc="Set corresponding switch" from="16" name="SW_SGMB" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="24" name="SW_SGRE" to="24">
                </field>
              <field access="RW" desc="Set corresponding switch" from="28" name="SW_SGR" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_FW_MOD_SEL" bitWidth="32" desc="Full Wave Cmod Switch Waveform selection" name="SW_FW_MOD_SEL">
              <field access="RW" desc="Set corresponding switch" from="0" name="SW_F1PM" to="0">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="10" name="SW_F1MA" to="8">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="18" name="SW_F1CA" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="20" name="SW_C1CC" to="20">
                </field>
              <field access="RW" desc="Set corresponding switch" from="24" name="SW_C1CD" to="24">
                </field>
              <field access="RW" desc="Set corresponding switch" from="28" name="SW_C1F1" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_FW_TANK_SEL" bitWidth="32" desc="Full Wave Csh_tank Switch Waveform selection" name="SW_FW_TANK_SEL">
              <field access="RW" desc="Set corresponding switch" from="4" name="SW_F2PT" to="4">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="10" name="SW_F2MA" to="8">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="14" name="SW_F2CA" to="12">
                </field>
              <field access="RW" desc="Select waveform for corresponding switch" from="18" name="SW_F2CB" to="16">
                </field>
              <field access="RW" desc="Set corresponding switch" from="20" name="SW_C2CC" to="20">
                </field>
              <field access="RW" desc="Set corresponding switch" from="24" name="SW_C2CD" to="24">
                </field>
              <field access="RW" desc="Set corresponding switch" from="28" name="SW_C2F2" to="28">
                </field>
            </register>
            <register address="CYREG_CSD_SW_DSI_SEL" bitWidth="32" desc="DSI output switch control Waveform selection" name="SW_DSI_SEL">
              <field access="RW" desc="Select waveform for dsi_csh_tank signal (called dsi_cap_lo_en in CDSv1). For CSX when DUAL_CAP_EN is set this signal will have the special functionality to go low one clk_hf cycle ahead of the end of the corresponding csd_sense phase (just like for CSDv1), in all other use-cases the functionality is the same as for other switch controls." from="2" name="DSI_CSH_TANK" to="0">
                </field>
              <field access="RW" desc="Select waveform for dsi_cmod signal (called dsi_cap_hi_en in CDSv1).  For CSX when DUAL_CAP_EN is set this signal will have the special functionality to go low one clk_hf cycle ahead of the end of the corresponding csd_sense phase (just like for CSDv1), in all other use-cases the functionality is the same as for other switch controls." from="6" name="DSI_CMOD" to="4">
                </field>
            </register>
            <register address="CYREG_CSD_SEQ_TIME" bitWidth="32" desc="Sequencer Timing" name="SEQ_TIME">
              <field access="RW" desc="Define Auto-Zero time in csd_sense cycles -1." from="7" name="AZ_TIME" to="0">
                </field>
            </register>
            <register address="CYREG_CSD_SEQ_INIT_CNT" bitWidth="32" desc="Sequencer Initial conversion and sample counts" name="SEQ_INIT_CNT">
              <field access="RW" desc="Number of conversion per sample (PERIOD in CSDv1), if set to 0 the Sample_init state will be skipped." from="15" name="CONV_CNT" to="0">
                </field>
            </register>
            <register address="CYREG_CSD_SEQ_NORM_CNT" bitWidth="32" desc="Sequencer Normal conversion and sample counts" name="SEQ_NORM_CNT">
              <field access="RW" desc="Number of conversion per sample (PERIOD in CSDv1), if set to 0 the Sample_norm state will be skipped." from="15" name="CONV_CNT" to="0">
                </field>
            </register>
            <register address="CYREG_CSD_ADC_CTL" bitWidth="32" desc="ADC Control" name="ADC_CTL">
              <field access="RW" desc="ADC timing -1 in csd_sense clock cycles (actual time is ADC_TIME+1 cycles), either used to discharge Cref1&amp;2, or as the aperture to capture the input voltage on Cref1&amp;2" from="7" name="ADC_TIME" to="0">
                </field>
              <field access="RW" desc="Enable ADC measurement. When enabled the ADC sequencer will be started when the main sequencer goes to the SAMPLE_NORM state" from="17" name="ADC_MODE" to="16">
                <value desc="No ADC measurement" name="OFF" value="0">
                  </value>
                <value desc="Count time A to bring Cref1 + Cref2 up from Vssa to Vrefhi with IDACB" name="VREF_CNT" value="1">
                  </value>
                <value desc="Count time B to bring Cref1 + Cref2 back up to Vrefhi with IDACB (after bringing them down for time A/2 cycles with IDACB sinking)" name="VREF_BY2_CNT" value="10">
                  </value>
                <value desc="Determine HSCMP polarity and count time C to source/sink Cref1 + Cref2 from Vin to Vrefhi." name="VIN_CNT" value="11">
                  </value>
              </field>
            </register>
            <register address="CYREG_CSD_SEQ_START" bitWidth="32" desc="Sequencer start" name="SEQ_START">
              <field access="RW" desc="Start the CSD sequencer. The sequencer will clear this bit when it is done. Depending on the mode the sequencer is done when a sample has been accumulated, when the high speed comparator trips or if the sequencer is aborted. When the ADC is enabled the ADC sequencer will start when the CSD sequencer reaches the Sample_norm state (only with the regular CSD scan mode)." from="0" name="START" to="0">
                </field>
              <field access="RW" desc="0 = regular CSD scan + optional ADC &#10;1 = coarse initialization, the Sequencer will go to the INIT_COARSE state." from="1" name="SEQ_MODE" to="1">
                </field>
              <field access="RW" desc="When a 1 is written the CSD and ADC sequencers will be aborted (if they are running) and the START bit will be cleared. This bit always read as 0." from="3" name="ABORT" to="3">
                </field>
              <field access="RW" desc="When this bit is set a positive edge on dsi_start will start the CSD sequencer and if enabled also the ADC sequencer." from="4" name="DSI_START_EN" to="4">
                </field>
              <field access="RW" desc="When set the AutoZero_0 state will be skipped" from="8" name="AZ0_SKIP" to="8">
                </field>
              <field access="RW" desc="When set the AutoZero_1 state will be skipped" from="9" name="AZ1_SKIP" to="9">
                </field>
            </register>

        </block>
    </block>
</deviceData>