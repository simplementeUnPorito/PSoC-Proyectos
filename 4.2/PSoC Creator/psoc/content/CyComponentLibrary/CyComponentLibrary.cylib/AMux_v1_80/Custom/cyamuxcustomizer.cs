/*******************************************************************************
* Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions, 
* disclaimers, and limitations in the end user license agreement accompanying 
* the software package with which this file was provided.
********************************************************************************/


using System.Collections.Generic;
using CyDesigner.Extensions.Common;
using System.Diagnostics;
using System.Drawing;
using CyDesigner.Extensions.Gde;

namespace AMux_v1_80
{
    [CyCompDevCustomizer()]
    public class CyCustomizer :
        ICyVerilogCustomize_v1,
        ICyShapeCustomize_v1
    {

        private enum AmuxCodeType
        {
            Single,
            Differential_A,
            Differential_B
        }

        private const string OUTPUT_A_TERM_BASE_NAME = "AoutTerm";
        private const string OUTPUT_B_TERM_BASE_NAME = "BoutTerm";
        private const string GENERATED_SHAPE = "SymbolShape";
        private const string INPUT_A_TERM_BASE_NAME = "AinTerm";
        private const string INPUT_B_TERM_BASE_NAME = "BinTerm";
        private const string AMUX_PRIM_NAME = "cy_psoc3_amux_v1_0";

        private const uint SINGLE_MUX = 1;
        private const uint DIFFERENTIAL_MUX = 2;

        #region ICyVerilogCustomize_v1 Members

        public CyCustErr CustomizeVerilog(
            ICyInstQuery_v1 instQuery,
            ICyTerminalQuery_v1 termQuery,
            out string codeSnippet)
        {
            Debug.Assert(instQuery != null);
            if (instQuery == null)
            {
                codeSnippet = string.Empty;
                return new CyCustErr("Invalid instance query parameter");
            }

            // Get parameters
            CyCompDevParam numTerminals_param = instQuery.GetCommittedParam("Channels");
            uint numTerminals = uint.Parse(numTerminals_param.Value);

            CyCompDevParam ChannelWidth_param = instQuery.GetCommittedParam("MuxType");
            uint channelWidth = uint.Parse(ChannelWidth_param.Value);

            CyCompDevParam OneActive_param = instQuery.GetCommittedParam("AtMostOneActive");
            int oneActive = bool.Parse(OneActive_param.Value) ? 1 : 0;

            CyCompDevParam isolation_param = instQuery.GetCommittedParam("Isolation");
            uint isolation = uint.Parse(isolation_param.Value);

            string instanceName = instQuery.InstanceName;

            CyVerilogBuilder vBuilder = new CyVerilogBuilder();
            vBuilder.AddComment("-- AMux " + instanceName + " start -- ***");

            AmuxCodeType type = channelWidth == DIFFERENTIAL_MUX ? AmuxCodeType.Differential_A : AmuxCodeType.Single;

            // Build Mux A verilog code
            WriteAmuxCode(vBuilder, termQuery, instanceName, type, numTerminals, oneActive, isolation);

            if (channelWidth == DIFFERENTIAL_MUX)
            {
                // Build Mux B verilog code
                WriteAmuxCode(vBuilder, termQuery, instanceName, AmuxCodeType.Differential_B, numTerminals, oneActive,
                              isolation);
            }

            vBuilder.AddComment("-- AMux " + instanceName + " end --");
            codeSnippet = vBuilder.VerilogString;

            return CyCustErr.OK;
        }

        private void WriteAmuxCode(
            CyVerilogBuilder vBuilder,
            ICyTerminalQuery_v1 termQuery,
            string instanceName,
            AmuxCodeType type,
            uint numTerminals,
            int oneActive,
            uint isolation)
        {
            string muxSuffix;

            switch (type)
            {
                default:
                case AmuxCodeType.Single:
                    muxSuffix = string.Empty;
                    break;
                case AmuxCodeType.Differential_A:
                    muxSuffix = "_CYAMUXSIDE_A";
                    break;
                case AmuxCodeType.Differential_B:
                    muxSuffix = "_CYAMUXSIDE_B";
                    break;

            }

            string inputTermBaseName = type == AmuxCodeType.Differential_B
                                           ? INPUT_B_TERM_BASE_NAME
                                           : INPUT_A_TERM_BASE_NAME;

            string outputTermBaseName = type == AmuxCodeType.Differential_B
                                            ? OUTPUT_B_TERM_BASE_NAME
                                            : OUTPUT_A_TERM_BASE_NAME;

            // Collect the signal segment names for each of the instance terminals
            List<string> inSigSegNames = new List<string>();

            // Note: This works because the term names are generated by us in
            // CustomizeShapes(). 
            for (int index = 0; index < numTerminals; index++)
            {
                inSigSegNames.Add(termQuery.GetTermSigSegScalarName(GetTermName(inputTermBaseName, index)));
            }

            string outSigSegName = termQuery.GetTermSigSegScalarName(outputTermBaseName);

            if (type == AmuxCodeType.Differential_B)
            {
                vBuilder.WriteLine("");
                vBuilder.AddComment("-- Mux B --");
            }
            else
            {
                vBuilder.AddComment("-- Mux A --");
            }
            vBuilder.WriteLine("");
            vBuilder.WriteLine(AMUX_PRIM_NAME + " " + instanceName + muxSuffix + "(");
            vBuilder.IncreaseIndent();
            vBuilder.WriteLine(".muxin({");
            vBuilder.IncreaseIndent();
            // Add the signal names for the muxin input
            for (int i = (inSigSegNames.Count - 1); i >= 0; i--)
            {
                if (i > 0)
                {
                    vBuilder.WriteLine(inSigSegNames[i] + ",");
                }
                else
                {
                    vBuilder.WriteLine(inSigSegNames[i]);
                }
            }
            vBuilder.WriteLine("}),");
            vBuilder.DecreaseIndent();
            vBuilder.WriteLine(".vout(" + outSigSegName + ")");
            vBuilder.WriteLine(");");
            vBuilder.DecreaseIndent();
            vBuilder.WriteLine("");

            vBuilder.DefineParam(instanceName + muxSuffix, "muxin_width", numTerminals.ToString());
            vBuilder.DefineParam(instanceName + muxSuffix, "init_mux_sel", numTerminals.ToString() + "'h0");
            vBuilder.DefineParam(instanceName + muxSuffix, "one_active", oneActive.ToString());
            vBuilder.DefineParam(instanceName + muxSuffix, "connect_mode", isolation.ToString());
            vBuilder.WriteLine("");
        }

        private string GetTermName(string baseName, int index)
        {
            return baseName + index;
        }

        #endregion

        #region ICyShapeCustomize_v1 Members

        public CyCustErr CustomizeShapes(
            ICyInstQuery_v1 instQuery,
            ICySymbolShapeEdit_v1 shapeEdit,
            ICyTerminalEdit_v1 termEdit)
        {
            shapeEdit.ShapesRemove("dummyTerminal");
            shapeEdit.ShapesRemove("symbolName");
            shapeEdit.ShapesRemove("preview_shape");
            termEdit.RemoveAllTerminals();

            // Add term shapes
            List<string> shapeTags = new List<string>();
            shapeTags.Add(GENERATED_SHAPE);

            // Read Parameters
            CyCompDevParam numTerminalsParam = instQuery.GetCommittedParam("Channels");
            uint numTerminals = uint.Parse(numTerminalsParam.Value);

            CyCompDevParam channelWidthParam = instQuery.GetCommittedParam("MuxType");
            uint channelWidth = uint.Parse(channelWidthParam.Value);

            return DrawSymbolGrowBothDirections(shapeEdit, termEdit, shapeTags, numTerminals, channelWidth);
        }

        private CyCustErr DrawSymbolGrowBothDirections(
            ICySymbolShapeEdit_v1 shapeEdit,
            ICyTerminalEdit_v1 termEdit,
            List<string> shapeTags,
            uint numTerminals,
            uint channelWidth)
        {
            // Place Input terminals
            float pinSpace = (channelWidth == SINGLE_MUX) ? 12f : 18f;
            float pinOffset = ((numTerminals%2) == 0f)
                                  ? (((numTerminals/2f)*-(pinSpace)) + 6f)
                                  : (((numTerminals + 1)/2f)*-(pinSpace) + 12f);

            for (int index = 0; index < numTerminals; index++)
            {
                float pinY = (index*pinSpace) + pinOffset;
                AddInputTerminals(channelWidth, index, pinY, termEdit);
            }

            // Place Output Terminal/s
            float outputPinOffset = (channelWidth == SINGLE_MUX) ? 0f : -6f;
            AddOutputTerminals(channelWidth, outputPinOffset, termEdit);

            // Single terminal mux needs to be drawn seperately. 
            if (numTerminals == 1) return DrawSingleTermAmux(true, channelWidth, shapeEdit, shapeTags);

            // Generate trapezoid points
            float topY = pinOffset - 12f;
            float bottomY = (numTerminals*pinSpace) + pinOffset;
            DrawTrapezoidPoints(topY, bottomY, shapeEdit, shapeTags);

            // Draw Mux trapeziod 

            float instPointY = pinOffset - 24f;
            float minChannelY = ((numTerminals)*-(pinSpace/2)) + 2f;
            float maxChannelX = (numTerminals <= 10) ? 15f : 19f;
            float maxChannelAdjust = (channelWidth == SINGLE_MUX) ? 11f : 17f;
            float maxChannelY = ((numTerminals)*(pinSpace/2)) - maxChannelAdjust;
            DrawTextsAndOthers(instPointY, minChannelY, maxChannelX, maxChannelY, shapeEdit, shapeTags);

            return CyCustErr.OK;
        }

        private static CyCustErr DrawSingleTermAmux(
            bool isGrowBothDirection,
            uint channelWidth,
            ICySymbolShapeEdit_v1 shapeEdit,
            List<string> shapeTags)
        {
            float adjust = isGrowBothDirection ? 0 : 6;

            float leftTop, leftBottom, instantNameY, minChannelY;
            if (channelWidth == SINGLE_MUX)
            {
                leftTop = -18f;
                leftBottom = 18f;
                instantNameY = -30f;
                minChannelY = -4f;
            }
            else
            {
                leftTop = -24f + adjust;
                leftBottom = 24f + adjust;
                instantNameY = -36f + adjust;
                minChannelY = -8f + adjust;
            }

            DrawTrapezoidPoints(leftTop, leftBottom, shapeEdit, shapeTags);

            DrawTextsAndOthers(instantNameY, minChannelY, float.NaN, float.NaN, shapeEdit, shapeTags);
            shapeEdit.ShapesRemove("theMaxChannel");

            return CyCustErr.OK;
        }

        private void AddInputTerminals(
            uint channelWidth,
            int index,
            float pinY,
            ICyTerminalEdit_v1 termEdit)
        {
            const float ADJACENT_PIN_SPACE = 6f;

            if (channelWidth == SINGLE_MUX)
            {
                string termName = GetTermName(INPUT_A_TERM_BASE_NAME, index);
                termEdit.TerminalAdd(termName, CyCompDevTermDir.INOUT, CyCompDevTermType.ANALOG,
                                     new PointF(0f, pinY), string.Empty, 0f, false);
            }
            else
            {
                string termNameA = GetTermName(INPUT_A_TERM_BASE_NAME, index);
                termEdit.TerminalAdd(termNameA, CyCompDevTermDir.INOUT,
                                     CyCompDevTermType.ANALOG, new PointF(0f, pinY), string.Empty, 0f, false);

                string termNameB = GetTermName(INPUT_B_TERM_BASE_NAME, index);
                termEdit.TerminalAdd(termNameB, CyCompDevTermDir.INOUT,
                                     CyCompDevTermType.ANALOG, new PointF(0f, pinY + ADJACENT_PIN_SPACE),
                                     string.Empty, 0f, false);
            }
        }

        private static void AddOutputTerminals(
            uint channelWidth,
            float outputPinOffset,
            ICyTerminalEdit_v1 termEdit)
        {
            if (channelWidth == SINGLE_MUX) // Single ended Mux
            {
                termEdit.TerminalAdd(OUTPUT_A_TERM_BASE_NAME, CyCompDevTermDir.INOUT, CyCompDevTermType.ANALOG,
                                     new PointF(30f, outputPinOffset), string.Empty, 180f, false);
            }
            else // Differential Mux
            {
                termEdit.TerminalAdd(OUTPUT_A_TERM_BASE_NAME, CyCompDevTermDir.INOUT, CyCompDevTermType.ANALOG,
                                     new PointF(30f, outputPinOffset), string.Empty, 180f, false);

                termEdit.TerminalAdd(OUTPUT_B_TERM_BASE_NAME, CyCompDevTermDir.INOUT, CyCompDevTermType.ANALOG,
                                     new PointF(30f, outputPinOffset + 12f), string.Empty, 180f, false);
            }
        }

        private static void DrawTrapezoidPoints(
            float topY,
            float bottomY,
            ICySymbolShapeEdit_v1 shapeEdit,
            List<string> shapeTags)
        {
            PointF topLeft = new PointF(6f, topY);
            PointF bottomLeft = new PointF(6f, bottomY);
            PointF topRight = new PointF(24f, topY + 12f);
            PointF bottomRight = new PointF(24f, bottomY - 12f);
            shapeEdit.CreatePolyline(shapeTags, topLeft, topRight, bottomRight, bottomLeft, topLeft);
        }

        private static void DrawTextsAndOthers(
            float instPointY,
            float minChannelY,
            float maxChannelX,
            float maxChannelY,
            ICySymbolShapeEdit_v1 shapeEdit,
            List<string> shapeTags)
        {
            // Draw Mux trapeziod 
            shapeEdit.ShapesConvertToClosed(shapeTags, shapeTags);
            shapeEdit.SetFillColor(shapeTags[shapeTags.Count - 1], Color.Gainsboro);
            shapeEdit.SetOutlineWidth(shapeTags[shapeTags.Count - 1], 1F);

            shapeEdit.ShapesMoveTo("theInstanceName", new PointF(30f, instPointY));
            shapeEdit.ShapesMoveTo("theMinChannel", new PointF(15f, minChannelY));

            if ((!float.IsNaN(maxChannelX)) && (!float.IsNaN(maxChannelY)))
                shapeEdit.ShapesMoveTo("theMaxChannel", new PointF(maxChannelX, maxChannelY));

            shapeEdit.BringToFront("theMaxChannel");
            shapeEdit.BringToFront("theMinChannel");
        }

        #endregion
    }
}
