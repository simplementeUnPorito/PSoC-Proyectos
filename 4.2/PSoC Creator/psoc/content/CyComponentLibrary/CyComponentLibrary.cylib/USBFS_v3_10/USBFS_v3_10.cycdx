<?xml version="1.0" encoding="us-ascii"?>

<deviceData version="1"
  xmlns="http://cypress.com/xsd/cydevicedata"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://cypress.com/xsd/cydevicedata cydevicedata.xsd">

    <block name="`$INSTANCE_NAME`" desc="USBFS" visible="true">  
       	
    <register name="USB_CLK_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__USB_CLK_EN" bitWidth="`$DW_RegSize`" 
    desc="USB Control 0 Register">
        <field name="CSR_CLK_EN"     from="7"  to="7" access="RW" desc="Clock Enable for Core Logic clocked by AHB bus clock.">
          <value name="Disabled" value="0" desc="Disables clock to UBS block."/>
          <value name="Enabled"  value="1" desc="Enables clock to UBS block."/>
        </field>
    </register>
    
    <register name="CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__CR0" bitWidth="`$DW_RegSize`" 
    desc="USB Control 0 Register">
        <field name="DEVICE_ADDRESS" from="6"  to="0" access="R" desc="These bits specify the USB device address to which the SIE will respond. This address must be set by firmware and is specified by the USB Host with a SET ADDRESS command during USB enumeration. This value must be programmed by firmware when assigned during enumeration. It is not set automatically by the hardware.">
        </field>
        <field name="USB_ENABLE"     from="7"  to="7" access="RW" desc="This bit enables the device to respond to USB traffic.">
          <value name="Disabled" value="0" desc="Block responds to USB traffic."/>
          <value name="Enabled"  value="1" desc="Block does not respond to USB traffic."/>
        </field>
    </register>
    
    <register name="CR1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__CR1" bitWidth="`$DW_RegSize`" 
    desc="USB Control 1 Register">
        <field name="REG_ENABLE"        from="0"  to="0" access="R" desc="This bit controls the operation of the internal USB regulator. For applications with supply voltages in the 5V range this bit is set high to enable the internal regulator. For device supply voltage in the 3.3V range this bit is cleared to connect the transceiver directly to the supply.">
          <value name="Disabled" value="0" desc="Regulator for 5V is disabled."/>
          <value name="Enabled"  value="1" desc="Regulator for 5V is enabled."/>
        </field>
        <field name="ENABLE_LOCK"       from="1"  to="1" access="RW" desc="This bit is set to turn on the automatic frequency locking of the internal oscillator to USB traffic.  Unless an external clock is being provided this bit should remain set for proper USB operation.">
        </field>
        <field name="BUS_ACTIVITY"      from="2"  to="2" access="RW" desc="The Bus Activity bit is a stickybit that detects any non-idle USB event that has occurred on the USB bus. Once set to High by the SIE to indicate the bus activity this bit retains its logical High value until firmware clears it.">
        </field>
        <field name="TRIM_OFFSET_MSB"   from="3"  to="3" access="RW" desc="This bit enables trim bit[7].">
        </field>
    </register>
    
    <register name="USBIO_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__USBIO_CR0" bitWidth="`$DW_RegSize`" 
    desc="USBIO Control 0 Register">
        <field name="RD"    from="0"  to="0" access="R" desc="Received Data. This read only bit gives the state of the USB differential receiver.">
          <value name="DIFF_LOW"  value="0" desc="D+ less than D- (K state), or D+=D-=0 (SE0)."/>
          <value name="DIFF_HIGH" value="1" desc="D+ greater than D- (J state)."/>
        </field>
        <field name="TD"    from="5"  to="5" access="RW" desc="Transmit Data. Transmit a USB J or K state on the USB bus. No effect if TEN=0 or TSE0=1.">
          <value name="DIFF_K"  value="0" desc="Force USB K state (D+ is low D- is high)."/>
          <value name="DIFF_J"  value="1" desc="Force USB J state (D+ is high D- is low)."/>
        </field>
        <field name="TSE0"  from="6"  to="6" access="RW" desc="Transmit Single-Ended Zero. SE0: both D+ and D- low. No effect if TEN=0.">
        </field>
        <field name="TEN"   from="7"  to="7" access="RW" desc="USB Transmit Enable. This is used to manually transmit on the D+ and D- pins. Normally this bit should be cleared to allow the internal SIE to drive the pins. The most common reason for manually transmitting is to force a resume state on the bus.">
        </field>
    </register>

    <register name="USBIO_CR1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__USBIO_CR1" bitWidth="`$DW_RegSize`" 
    desc="USBIO Control 1 Register">
        <field name="DMO"     from="0"  to="0" access="R" desc="This read only bit gives the state of the D- pin.">
        </field>
        <field name="DPO"     from="1"  to="1" access="R" desc="This read only bit gives the state of the D+ pin.">
        </field>
        <field name="USBPUEN" from="2"  to="2" access="RW" desc="This bit enables the connection of the internal 1.5 k pull up resistor on the D+ pin.">
        </field>
        <field name="IOMODE"  from="5"  to="5" access="RW" desc="This bit allows the D+ and D- pins to be configured for either USB mode or bit-banged modes. If this bit is set the DMI and DPI bits are used to drive the D- and D+ pins.">
          <value name="Bit-banged"  value="0" desc="Bit-banged mode for Dm and Dp."/>
          <value name="USB"         value="1" desc="USB block controls Dm and Dp."/>
        </field>
    </register>
    
    <register name="DYN_RECONFIG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__DYN_RECONFIG" bitWidth="`$DW_RegSize`" 
    desc="USB Dynamic reconfiguration Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="DYN_CONFIG_EN"        from="0"  to="0" access="RW"  desc="This bit is used to enable the dynamic re-configuration for the selected EP. If set to 1, indicates the reconfiguration required for selected EP. Use 0 for EP1, 1 for EP2, etc.">
        </field>
        <field name="DYN_RECONFIG_EPNO"    from="3"  to="1" access="RW"  desc="These bits indicates the EP number for which reconfiguration is required when dyn_config_en bit is set to 1.">
        </field>
        <field name="DYN_RECONFIG_RDY_STS" from="4"  to="4" access="R" desc="This bit indicates the ready status for the dynamic reconfiguration, when set to 1, indicates the block is ready for reconfiguration.">
        </field>
    </register>
     
    <register name="BUS_RST_CNT"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__BUS_RST_CNT" bitWidth="`$DW_RegSize`" 
    desc="Bus Reset Count Register"
    hidden="true">
        <field name="BUS_RST_CNT"   from="3"  to="0" access="RW"  desc="Bus Reset Count Length. Bus Reset Count register ; For USB bus reset length; The value in this register determines the no. of pulses of the low freq. clock which will be counted to determine if an SE0 condition has been held for long enough to declare a USB Bus reset condition. In krypton, 3 pulses of a 32 KHz clock were counted to declare a usb bus reset condition. In leopard, a 100 KHz clock is used. Recommended is to count 10 pulses of this clock to remain equivalent to Krypton.">
        </field>
    </register>

    <register name="EP0_CR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__EP0_CR" bitWidth="`$DW_RegSize`" 
    desc="Endpoint0 control Register">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>
    
    <register name="EP0_CNT"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__EP0_CNT" bitWidth="`$DW_RegSize`" 
    desc="Endpoint0 control Register">
        <field name="BYTE_COUNT"    from="3" to="0" access="RW" desc="These bits indicate the number of data bytes in a transaction. For IN transactions firmware loads the count with the number of bytes to be transmitted to the host from the endpoint FIFO. Valid values are 0 to 8. For OUT or SETUP transactions the count is updated by hardware to the number of data bytes received plus two for the CRC bytes. Valid values are 2 to 10.">
        </field>
        <field name="DATA_VALID"    from="4" to="4" access="RW" desc="This bit is used for OUT/SETUP transactions only and is read only. It is cleared to '0' if CRC bit stuffing errors or PID errors occur. This bit does not update for some endpoint mode settings.">
          <value name="DATA_ERROR"  value="0" desc="No ACK'd transactions since bit was last cleared."/>
          <value name="DATA_VALID"  value="1" desc="Indicates a transaction ended with an ACK."/>
        </field>
        <field name="DATA_TOGGLE"   from="5" to="5" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="ARB_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_CFG" bitWidth="`$DW_RegSize`"
    desc="Arbiter configuration register">
        <field name="AUTO_MEM" from="4" to="4" access="RW" desc="Enables Auto Memory Configuration.  Manual memory configuration by default.">
        </field>
        <field name="DMA_CFG"  from="6" to="5" access="RW" desc="DMA Access Configuration.">
            <value name="DMA_NONE"   value="00" desc="No DMA."/>
            <value name="DMA_MANUAL" value="01" desc="Manual DMA."/>
            <value name="DMA_AUTO"   value="10" desc="Auto DMA."/> 
        </field>
        <field name="CFG_CMP"  from="7" to="7" access="RW" desc="Register Configuration Complete Indication. Posedge is detected on this bit. Hence a 0 to 1 transition is required.">
        </field>
    </register>
  
    <register name="ARB_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Interrupt Enable Register">
        <field name="EP1_INTR_EN" from="0" to="0" access="RW" desc="Enables interrupt for EP1.">
        </field>
        <field name="EP2_INTR_EN" from="1" to="1" access="RW" desc="Enables interrupt for EP2.">
        </field>
        <field name="EP3_INTR_EN" from="2" to="2" access="RW" desc="Enables interrupt for EP3.">
        </field>
        <field name="EP4_INTR_EN" from="3" to="3" access="RW" desc="Enables interrupt for EP4.">
        </field>
        <field name="EP5_INTR_EN" from="4" to="4" access="RW" desc="Enables interrupt for EP5.">
        </field>
        <field name="EP6_INTR_EN" from="5" to="5" access="RW" desc="Enables interrupt for EP6.">
        </field>
        <field name="EP7_INTR_EN" from="6" to="6" access="RW" desc="Enables interrupt for EP7.">
        </field>
        <field name="EP8_INTR_EN" from="7" to="7" access="RW" desc="Enables interrupt for EP8.">
        </field>
    </register>

    <register name="ARB_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_INT_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Interrupt Status">
        <field name="EP1_INTR" from="0" to="0" access="R" desc="Interrupt status for EP1.">
        </field>
        <field name="EP2_INTR" from="1" to="1" access="R" desc="Interrupt status for EP2.">
        </field>
        <field name="EP3_INTR" from="2" to="2" access="R" desc="Interrupt status for EP3.">
        </field>
        <field name="EP4_INTR" from="3" to="3" access="R" desc="Interrupt status for EP4.">
        </field>
        <field name="EP5_INTR" from="4" to="4" access="R" desc="Interrupt status for EP5.">
        </field>
        <field name="EP6_INTR" from="5" to="5" access="R" desc="Interrupt status for EP6.">
        </field>
        <field name="EP7_INTR" from="6" to="6" access="R" desc="Interrupt status for EP7.">
        </field>
        <field name="EP8_INTR" from="7" to="7" access="R" desc="Interrupt status for EP8.">
        </field>
    </register>

    <register name="SIE_EP_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="USB SIE Data Endpoints Interrupt Enable Register">
        <field name="EP1_INTR_EN" from="0" to="0" access="RW" desc="Enables interrupt for EP1.">
        </field>
        <field name="EP2_INTR_EN" from="1" to="1" access="RW" desc="Enables interrupt for EP2.">
        </field>
        <field name="EP3_INTR_EN" from="2" to="2" access="RW" desc="Enables interrupt for EP3.">
        </field>
        <field name="EP4_INTR_EN" from="3" to="3" access="RW" desc="Enables interrupt for EP4.">
        </field>
        <field name="EP5_INTR_EN" from="4" to="4" access="RW" desc="Enables interrupt for EP5.">
        </field>
        <field name="EP6_INTR_EN" from="5" to="5" access="RW" desc="Enables interrupt for EP6.">
        </field>
        <field name="EP7_INTR_EN" from="6" to="6" access="RW" desc="Enables interrupt for EP7.">
        </field>
        <field name="EP8_INTR_EN" from="7" to="7" access="RW" desc="Enables interrupt for EP8.">
        </field>
    </register>

    <register name="SIE_EP_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP_INT_SR" bitWidth="`$DW_RegSize`" 
    desc="SIE Data Endpoint Interrupt Status Register">
        <field name="EP1_INTR" from="0" to="0" access="RW" desc="Interrupt status for EP1.">
        </field>
        <field name="EP2_INTR" from="1" to="1" access="RW" desc="Interrupt status for EP2.">
        </field>
        <field name="EP3_INTR" from="2" to="2" access="RW" desc="Interrupt status for EP3.">
        </field>
        <field name="EP4_INTR" from="3" to="3" access="RW" desc="Interrupt status for EP4.">
        </field>
        <field name="EP5_INTR" from="4" to="4" access="RW" desc="Interrupt status for EP5.">
        </field>
        <field name="EP6_INTR" from="5" to="5" access="RW" desc="Interrupt status for EP6.">
        </field>
        <field name="EP7_INTR" from="6" to="6" access="RW" desc="Interrupt status for EP7.">
        </field>
        <field name="EP8_INTR" from="7" to="7" access="RW" desc="Interrupt status for EP8.">
        </field>
    </register>
    
    <!-- DMA auto mode specific registers -->
    <register name="BUF_SIZE"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__BUF_SIZE" bitWidth="`$DW_RegSize`" 
    desc="Dedicated Endpoint Buffer Size Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="IN_BUF"    from="3" to="0" access="RW" desc="Buffer size for IN Endpoints:  1 - 2 bytes, 2 - 4 bytes; 9 - 512 bytes.">
        </field>
        <field name="OUT_BUF"   from="7" to="4" access="RW" desc="Buffer size for OUT Endpoints: 1 - 2 bytes, 2 - 4 bytes; 9 - 512 bytes.">
        </field>
    </register>

    <register name="EP_ACTIVE"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__EP_ACTIVE" bitWidth="`$DW_RegSize`" 
    desc="Endpoint Active Indication Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="EP1_ACT" from="0" to="0" access="R" desc="Indicates that EP1 is currently active">
        </field>
        <field name="EP2_ACT" from="1" to="1" access="R" desc="Indicates that EP2 is currently active">
        </field>
        <field name="EP3_ACT" from="2" to="2" access="R" desc="Indicates that EP3 is currently active">
        </field>
        <field name="EP4_ACT" from="3" to="3" access="R" desc="Indicates that EP4 is currently active">
        </field>
        <field name="EP5_ACT" from="4" to="4" access="R" desc="Indicates that EP5 is currently active">
        </field>
        <field name="EP6_ACT" from="5" to="5" access="R" desc="Indicates that EP6 is currently active6">
        </field>
        <field name="EP7_ACT" from="6" to="6" access="R" desc="Indicates that EP7 is currently active">
        </field>
        <field name="EP8_ACT" from="7" to="7" access="R" desc="Indicates that EP8 is currently active">
        </field>
    </register>

    <register name="EP_TYPE"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__EP_TYPE" bitWidth="`$DW_RegSize`" 
    desc="Endpoint Type (IN/OUT) Indication"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="EP1_TYP" from="0" to="0" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP2_TYP" from="1" to="1" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP3_TYP" from="2" to="2" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP4_TYP" from="3" to="3" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP5_TYP" from="4" to="4" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP6_TYP" from="5" to="5" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP7_TYP" from="6" to="6" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
        <field name="EP8_TYP" from="7" to="7" access="RW" desc="Endpoint Type Indication.">
          <value name="EP_IN"   value="0" desc="IN outpoint."/>
          <value name="EP_OUT"  value="1" desc="OUT outpoint."/>
        </field>
    </register>

    <register name="DMA_THRES"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__DMA_THRES" bitWidth="`$DW_RegSize`" 
    desc="DMA Burst / Threshold Configuration LSB Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="WA8" from="7" to="0" access="RW" desc="DMA Threshold count.">
        </field>
    </register>

    <register name="DMA_THRES_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__DMA_THRES_MSB" bitWidth="`$DW_RegSize`" 
    desc="DMA Burst / Threshold Configuration LSB Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="WA9" from="0" to="0" access="RW" desc="DMA Threshold count MSB.">
        </field>
    </register>
    
    <register name="CWA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__CWA" bitWidth="`$DW_RegSize`" 
    desc="Common Area Write Address LSB Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for Common Area.">
        </field>
    </register>

    <register name="CWA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__CWA_MSB" bitWidth="`$DW_RegSize`"
    desc="Common Area Write Address LSB Register"
    hidden="`$DW_Hide_DmaAuto`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for Common Area MSB.">
        </field>
    </register>

    <!-- END: USBDEVv2_Regs Configuration registers. -->
    <register name="POWER_CTRL"
    hidden="`$DW_Hide_Usbv2Regs`"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_POWER_CTRL`" bitWidth="32" 
    desc="Power Control Register">
            <field name="VBUS_VALID_OVR"       from="1"   to="0" access="RW" desc="Overrides the value received from the GPIO input buffer connected to VBUS">
            <value name="FORCE_VALID_0" value="00" desc="Force vbus_valid = 0."/>
            <value name="FORCE_VALID_1" value="01" desc="Force vbus_valid = 1."/>
            <value name="GPIO_VALID"    value="10" desc="Use vbus_valid signal from GPIO input."/>
            <value name="PHY_VALID"     value="11" desc="Use vbus_valid signal from PHY detector."/> 
        </field>
        <field name="SUSPEND"              from="2"   to="2" access="RW" desc="Put PHY into Suspend mode. If the PHY is enabled, this bit MUST be set before entering a low power mode (DeepSleep/Hibernate).">
        </field>
        <field name="SUSPEND_DEL"          from="3"   to="3" access="RW" desc="Delayed version of SUSPEND. Always set SUSPEND and SUSPEND_DEL together in a single register write.  When taking PHY out of suspend mode, first clear SUSPEND, then clear SUSPEND_DEL at least 2us later.">
        </field>
        <field name="ISOLATE"              from="4"  to="4" access="RW" desc="Isolates the PHY outputs. Clear this bit at least 2us after vbus is known to be valid (vbus_valid=1). Isolation will be forced when vbus_valid goes low (see VBUS_VALID_OVR).">
        </field>
        <field name="CHDET_PWR_CTL"        from="6"  to="5" access="RW" desc="Power programmability for bandgap voltage buffer in the charger detect block.  See s8bg_vrefbuf public cell for more information. Default '0' is low power mode.">
        </field>
        <field name="ENABLE_DM_PULLDOWN" from="26"  to="26" access="RW" desc="Enables the ~15k pull down on the DM, default off. The 15k pull down is needed for Data Contact Detection (DCD).">
        </field>
        <field name="ENABLE_VBUS_PULLDOWN" from="26"  to="26" access="RW" desc="Enables the weak pull down on the VBUS, default on, to prevent floating node crow bar currents.">
        </field>
        <field name="ENABLE_RCVR"          from="27"  to="27" access="RW" desc="Enables the differential USB receiver.">
        </field>
        <field name="ENABLE_DPO"           from="28"  to="28" access="RW" desc="Enables the single ended receiver on D+.">
        </field>
        <field name="ENABLE_DMO"           from="29"  to="29" access="RW" desc="Enables the signle ended receiver on D-.">
        </field>
        <field name="ENABLE_CHGDET"        from="30"  to="30" access="RW" desc="Enables the charger detection circuitry.  After USB has connected, this circuitry can be disabled to save power.">
        </field>
        <field name="ENABLE"               from="31"  to="31" access="RW" desc="Mast enable of PHY and Charger Detector.  Nothing will work until this bit is set.">
        </field>
    </register>

    <register name="CHGDET_CTRL"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_CHGDET_CTRL`" bitWidth="32" 
    desc="Charger Detection Control Register"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="COMP_DP"    from="0"   to="0"  access="RW" desc="Connect the primary/secondary detection comparator and current sink  to D+.">
        </field>
        <field name="COMP_DM"    from="1"   to="1"  access="RW" desc="Connect the primary/secondary detection comparator and current sink to D-.">
        </field>
        <field name="COMP_EN"    from="2"   to="2"  access="RW" desc="Enable the primary/secondary detection comparator and current sink. This bit can be written concurrently with COMP_DP/COMP_DM.  Note that REF_EN must also be 1 for the comparator to work (because it receives a reference from it).">
        </field>
        <field name="REF_DP"     from="3"   to="3"  access="RW" desc="Connect the primary/secondary detection reference driver to D+.">
        </field>
        <field name="REF_DM"     from="4"   to="4"  access="RW" desc="Connect the primary/secondary detection reference driver to D-.">
        </field>
        <field name="REF_EN"     from="5"   to="5"  access="RW" desc="Enable the primary/secondary reference driver.  This bit can be written concurrently with REF_DP/REF_DM.">
        </field>
        <field name="DCD_SRC_EN" from="6"   to="6"  access="RW" desc="Enable the Data Contact Detect current source on D+.">
        </field>
        <field name="ADFT_CTRL"  from="13"  to="12" access="RW" desc="ADFT option to bring out buffered version of voltage reference input or adft intput to ADFT output (adft_out).">  
            <value name="ADFT_NORMAL"  value="00" desc="Normal operating mode, reference buffer used to generate internal references.  adft_out pulled low."/>
            <value name="ADFT_VBG"     value="01" desc="Use reference buffer to bring out voltage reference input (vbg) onto adft_out."/>
            <value name="ADFT_DONTUSE" value="10" desc="Illegal - do not use."/>
            <value name="ADFT_ADFTIN"  value="11" desc="Use reference buffer to bring out buffered version of system level adft input (adft_in) onto adft_out."/> 
        </field>
        <field name="COMP_OUT"   from="31"  to="31" access="RW" desc="Output of the primary/secondary detection comparator.  This output is not filtered or debounced and must be polled in software.">
        </field>
    </register>

    <register name="LPM_CTRL"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_LPM_CTRL`" bitWidth="32" 
    desc="LPM Control Register"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="LPM_EN"        from="0"   to="0" access="RW" desc="LPM enable.">
            <value name="Disable" value="0" desc="LPM token will not get a response (backward compatibility mode)."/>
            <value name="Enable"  value="1" desc="LPM token will get a handshake response (ACK, STALL, NYET or NAK). A STALL will be sent if the bLinkState is not 0001b. A NYET, NAK or ACK response will be sent depending on the NYET_EN and LPM_ACK_RESP bits below."/>
        </field>
        <field name="LPM_ACK_RESP"  from="1"   to="1" access="RW" desc="LPM ACK response enable (if LPM_EN=1), to allow firmware to refuse a low power request.">
            <value name="NYET_NACK" value="0" desc="A LPM token will get a NYET or NAK (depending on NYET_EN bit below) response and the device will NOT go to a low power mode."/>
            <value name="ACK"       value="1" desc="A LPM token will get an ACK response and the device will go to the requested low power mode."/>
        </field>
        <field name="NYET_EN"       from="2"  to="2" access="RW" desc="Allow firmware to choose which response to use for an LPM token (LPM_EN=1) when the device is NOT ready to go to the requested low power mode (LPM_ACK_RESP=0).">
            <value name="NYET" value="0" desc="A LPM token will get an NAK response (indicating a CRC error),  the host is expected to repeat the LPM token."/>
            <value name="NACK" value="1" desc="A LPM token will get a NYET response."/>
        </field>
        <field name="SUB_RESP"      from="4"  to="4" access="RW" desc="Enable a STALL response for all undefined SubPIDs, i.e. other than LPM (0011b). If not enabled then there will be no response (Error) for the undefined SubPIDs.">
        </field>
    </register>

 
    <register name="LPM_STAT"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_LPM_STAT`" bitWidth="32" 
    desc="LPM Status register"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="LPM_BESL"        from="3"   to="0" access="RW" desc="Best Effort Service Latency. This value should match either the Baseline (DeepSleep) or Deep (Hibernate) BESL in the BOS descriptor.">
        </field>
        <field name="LPM_REMOTEWAKE"  from="4"   to="4" access="RW" desc="LPM ACK response enable (if LPM_EN=1), to allow firmware to refuse a low power request.">
            <value name="Prohibited" value="0" desc="Device is prohibited from initiating a remote wake."/>
            <value name="Allowed"    value="1" desc="Device is allow to wake the host."/>
        </field>
    </register>	

    <register name="INTR_LVL_SEL"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_INTR_LVL_SEL`" bitWidth="32" 
    desc="Select interrupt level for each interrupt source"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="SOF_LVL_SEL"       from="1"   to="0"  access="RW" desc="USB SOF Interrupt level select.">
        </field>
        <field name="BUS_RESET_LVL_SEL" from="3"   to="2"  access="RW" desc="BUS RESET Interrupt level select.">
        </field>
        <field name="EP0_LVL_SEL"       from="5"   to="4"  access="RW" desc="EP0 Interrupt level select.">
        </field>
        <field name="LPM_LVL_SEL"       from="7"   to="6"  access="RW" desc="LPM Interrupt level select.">
        </field>
        <field name="RESUME_LVL_SEL"    from="9"   to="8"  access="RW" desc="Resume Interrupt level select.">
        </field>
        <field name="ARB_EP_LVL_SEL"    from="15"  to="14" access="RW" desc="Arbiter Endpoint Interrupt level select.">
        </field>
        <field name="EP1_LVL_SEL"       from="17"  to="16" access="RW" desc="EP1 Interrupt level select.">
        </field>
        <field name="EP2_LVL_SEL"       from="19"  to="18" access="RW" desc="EP2 Interrupt level select.">
        </field>
        <field name="EP3_LVL_SEL"       from="21"  to="20" access="RW" desc="EP3 Interrupt level select.">
        </field>
        <field name="EP4_LVL_SEL"       from="23"  to="22" access="RW" desc="EP4 Interrupt level select.">
        </field>
        <field name="EP5_LVL_SEL"       from="25"  to="24" access="RW" desc="EP5 Interrupt level select.">
        </field>
        <field name="EP6_LVL_SEL"       from="27"  to="26" access="RW" desc="EP6 Interrupt level select.">
        </field>
        <field name="EP7_LVL_SEL"       from="29"  to="28" access="RW" desc="EP7 Interrupt level select.">
        </field>
        <field name="EP8_LVL_SEL"       from="31"  to="30" access="RW" desc="EP8 Interrupt level select.">
        </field>
    </register>

    <register name="INTR_SIE_MASK"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_INTR_SIE_MASK`" bitWidth="32" 
    desc="USB SOF, BUS RESET and EP0 Interrupt Mask"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="SOF_INTR"       from="0" to="0"  access="RW" desc="USB SOF Interrupt.">
        </field>
        <field name="BUS_RESET_INTR" from="1" to="1"  access="RW" desc="BUS RESET Interrupt.">
        </field>
        <field name="EP0_INTR"       from="2" to="2"  access="RW" desc="EP0 Interrupt.">
        </field>
        <field name="LPM_INTR"       from="3"   to="3"  access="RW" desc="LPM Interrupt.">
        </field>
        <field name="RESUME_INTR"    from="4"   to="4"  access="RW" desc="Resume Interrupt.">
        </field>
    </register>

    <register name="`INTR_SIE"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_INTR_SIE`" bitWidth="32" 
    desc="USB SOF, BUS RESET and EP0 Interrupt Status"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="SOF_INTR"       from="0" to="0"  access="RW" desc="USB SOF Interrupt.">
        </field>
        <field name="BUS_RESET_INTR" from="1" to="1"  access="RW" desc="BUS RESET Interrupt.">
        </field>
        <field name="EP0_INTR"       from="2" to="2"  access="RW" desc="EP0 Interrupt.">
        </field>
        <field name="LPM_INTR"       from="3"   to="3"  access="RW" desc="LPM Interrupt.">
        </field>
        <field name="RESUME_INTR"    from="4"   to="4"  access="RW" desc="Resume Interrupt.">
        </field>
    </register>

    <register name="INTR_CAUSE_LO"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_INTR_CAUSE_LO`" bitWidth="32" 
    desc="Low priority interrupt Cause register"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="SOF_INTR"       from="0"   to="0"  access="RW" desc="USB SOF Interrupt.">
        </field>
        <field name="BUS_RESET_INTR" from="1"   to="1"  access="RW" desc="BUS RESET Interrupt.">
        </field>
        <field name="EP0_INTR"       from="2"   to="2"  access="RW" desc="EP0 Interrupt.">
        </field>
        <field name="LPM_INTR"       from="3"   to="3"  access="RW" desc="LPM Interrupt.">
        </field>
        <field name="RESUME_INTR"    from="4"   to="4"  access="RW" desc="Resume Interrupt.">
        </field>
        <field name="ARB_EP_INTR"    from="7"   to="7"  access="RW" desc="Arbiter Endpoint Interrupt.">
        </field>
        <field name="EP1_INTR"       from="8"   to="8"  access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP2_INTR"       from="9"   to="9"  access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP3_INTR"       from="10"  to="10" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP4_INTR"       from="11"  to="11" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP5_INTR"       from="12"  to="12" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP6_INTR"       from="13"  to="13" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP7_INTR"       from="14"  to="14" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP8_INTR"       from="15"  to="15" access="RW" desc="EP1 Interrupt.">
        </field>
    </register>

    <register name="INTR_CAUSE_MED"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_INTR_CAUSE_MED`" bitWidth="32" 
    desc="Medium priority interrupt Cause register"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="SOF_INTR"       from="0"   to="0"  access="RW" desc="USB SOF Interrupt.">
        </field>
        <field name="BUS_RESET_INTR" from="1"   to="1"  access="RW" desc="BUS RESET Interrupt.">
        </field>
        <field name="EP0_INTR"       from="2"   to="2"  access="RW" desc="EP0 Interrupt.">
        </field>
        <field name="LPM_INTR"       from="3"   to="3"  access="RW" desc="LPM Interrupt.">
        </field>
        <field name="RESUME_INTR"    from="4"   to="4"  access="RW" desc="Resume Interrupt.">
        </field>
        <field name="ARB_EP_INTR"    from="7"   to="7"  access="RW" desc="Arbiter Endpoint Interrupt.">
        </field>
        <field name="EP1_INTR"       from="8"   to="8"  access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP2_INTR"       from="9"   to="9"  access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP3_INTR"       from="10"  to="10" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP4_INTR"       from="11"  to="11" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP5_INTR"       from="12"  to="12" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP6_INTR"       from="13"  to="13" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP7_INTR"       from="14"  to="14" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP8_INTR"       from="15"  to="15" access="RW" desc="EP1 Interrupt.">
        </field>
    </register>

    <register name="INTR_CAUSE_HIGH"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__`$DW_USB_INTR_CAUSE_HI`" bitWidth="32" 
    desc="High priority interrupt Cause register"
    hidden="`$DW_Hide_Usbv2Regs`">
        <field name="SOF_INTR"       from="0"   to="0"  access="RW" desc="USB SOF Interrupt.">
        </field>
        <field name="BUS_RESET_INTR" from="1"   to="1"  access="RW" desc="BUS RESET Interrupt.">
        </field>
        <field name="EP0_INTR"       from="2"   to="2"  access="RW" desc="EP0 Interrupt.">
        </field>
        <field name="LPM_INTR"       from="3"   to="3"  access="RW" desc="LPM Interrupt.">
        </field>
        <field name="RESUME_INTR"    from="4"   to="4"  access="RW" desc="Resume Interrupt.">
        </field>
        <field name="ARB_EP_INTR"    from="7"   to="7"  access="RW" desc="Arbiter Endpoint Interrupt.">
        </field>
        <field name="EP1_INTR"       from="8"   to="8"  access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP2_INTR"       from="9"   to="9"  access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP3_INTR"       from="10"  to="10" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP4_INTR"       from="11"  to="11" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP5_INTR"       from="12"  to="12" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP6_INTR"       from="13"  to="13" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP7_INTR"       from="14"  to="14" access="RW" desc="EP1 Interrupt.">
        </field>
        <field name="EP8_INTR"       from="15"  to="15" access="RW" desc="EP1 Interrupt.">
        </field>
    </register>
    <!-- END: USBDEVv2_Regs Configuration registers. -->
    
        
    <!-- START: Endpoint 1 configuration and operation registers -->
    <register name="SIE_EP1_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP1_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_1`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP1_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP1_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_1`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP1_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP1_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_1`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP1_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP1_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_1`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP1_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP1_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_1`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP1_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP1_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_1`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW1_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW1_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_1`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW1_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW1_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_1`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW1_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW1_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_1`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW1_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW1_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_1`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 1 configuration and operation registers -->
    


    <!-- START: Endpoint 2 configuration and operation registers -->
    <register name="SIE_EP2_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP2_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_2`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP2_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP2_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_2`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP2_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP2_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_2`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP2_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP2_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_2`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP2_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP2_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_2`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP2_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP2_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_2`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW2_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW2_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_2`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW2_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW2_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_2`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW2_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW2_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_2`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW2_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW2_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_2`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 2 configuration and operation registers -->
    
    
    <!-- START: Endpoint 3 configuration and operation registers -->
    <register name="SIE_EP3_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP3_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_3`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP3_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP3_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_3`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP3_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP3_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_3`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP3_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP3_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_3`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP3_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP3_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_3`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP3_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP3_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_3`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW3_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW3_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_3`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW3_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW3_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_3`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW3_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW3_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_3`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW3_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW3_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_3`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 3 configuration and operation registers -->
    

    <!-- START: Endpoint 4 configuration and operation registers -->
    <register name="SIE_EP4_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP4_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_4`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP4_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP4_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_4`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP4_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP4_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_4`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP4_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP4_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_4`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP4_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP4_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_4`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP4_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP4_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_4`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW4_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW4_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_4`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW4_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW4_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_4`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW4_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW4_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_4`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW4_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW4_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_4`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 4 configuration and operation registers -->


    <!-- START: Endpoint 5 configuration and operation registers -->
    <register name="SIE_EP5_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP5_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_5`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP5_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP5_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_5`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP5_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP5_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_5`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP5_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP5_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_5`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP5_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP5_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_5`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP5_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP5_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_5`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW5_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW5_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_5`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW5_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW5_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_5`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW5_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW5_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_5`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW5_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW5_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_5`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 4 configuration and operation registers -->
    
    
    <!-- START: Endpoint 6 configuration and operation registers -->
    <register name="SIE_EP6_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP6_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_6`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP6_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP6_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_6`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP6_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP6_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_6`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP6_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP6_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_6`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP6_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP6_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_6`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP6_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP6_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_6`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW6_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW6_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_6`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW6_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW6_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_6`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW6_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW6_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_6`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW6_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW6_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_6`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 6 configuration and operation registers -->
    
    
    <!-- START: Endpoint 7 configuration and operation registers -->
    <register name="SIE_EP7_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP7_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_7`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP7_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP7_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_7`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP7_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP7_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_7`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP7_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP7_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_7`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP7_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP7_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_7`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP7_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP7_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_7`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW7_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW7_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_7`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW7_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW7_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_7`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW7_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW7_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_7`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW7_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW7_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_7`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 7 configuration and operation registers -->
    
    
    <!-- START: Endpoint 8 configuration and operation registers -->
    <register name="SIE_EP8_CR0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP8_CR0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Control Register"
    hidden="`$rm_ep_isr_8`">
        <field name="MODE"       from="3" to="0" access="RW" desc="The mode controls how the USB SIE responds to traffic and how the USB SIE changes the mode of that endpoint as a result of host packets to the endpoint.">
            <value name="DISABLE"           value="0000" desc="Ignore all USB traffic to this endpoint."/>
            <value name="NAK_INOUT"         value="0001" desc="SETUP: Accept, IN: NAK, OUT: NAK."/>
            <value name="STATUS_OUT_ONLY"   value="0010" desc="SETUP: Accept, IN: STALL, OUT: ACK 0B tokens, NAK others."/>
            <value name="STALL_INOUT"       value="0011" desc="SETUP: Accept, IN: STALL, OUT: STALL."/>
            <value name="ISO_OUT"           value="0101" desc="SETUP: Ignore, IN: Ignore, OUT: Accept Isochronous OUT token."/>
            <value name="STATUS_IN_ONLY"    value="0110" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Stall."/>
            <value name="ISO_IN"            value="0111" desc="SETUP: Ignore, IN: Accept Isochronous IN token, OUT: Ignore."/>
            <value name="NAK_OUT"           value="1000" desc="SETUP: Ignore, IN: Ignore, OUT: NAK."/>
            <value name="ACK_OUT"           value="1001" desc="SETUP: Ignore, IN: Ignore, OUT: Accept data and ACK if STALL = 0, STALL otherwise. Change to MODE=8 after one succesfull OUT token."/>
            <value name="ACK_OUT_STATUS_IN" value="1011" desc="SETUP: Accept, IN: Respond with 0B data, OUT:  Accept data."/>
            <value name="NAK_IN"            value="1100" desc="SETUP: Ignore, IN: NAK, OUT: Ignore."/>
            <value name="ACK_IN"            value="1101" desc="SETUP: Ignore, IN: Respond to IN with data if STALL=0, STALL otherwise, OUT: Ignore"/>
            <value name="ACK_IN STATUS OUT" value="1111" desc="SETUP: Accept, IN: Respond to IN with data, OUT: ACK 0B tokens, NAK others."/>
        </field>
        <field name="ACKED_TXN"  from="4" to="4" access="RW" desc="ACKED_NO - 0, ACKED_YES - 1.">
        </field>
        <field name="NAK_INT_EN" from="5" to="5" access="RW" desc="When set this bit causes an endpoint interrupt to be generated even when a transfer completes with a NAK.">
        </field>
        <field name="ERR_IN_TXN" from="6" to="6" access="RW" desc="The Error in transaction bit is set whenever an error is detected.">
        </field>
        <field name="STALL"      from="7" to="7" access="RW" desc="When this bit is set the SIE stalls an OUT packet if the Mode bits are set to ACK-OUT. The SIE stalls an IN packet if the mode bits are set to ACK-IN. This bit must be clear for all other modes.">
        </field>
    </register>

    <register name="SIE_EP8_CNT0"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP8_CNT0" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count0 Register"
    hidden="`$rm_ep_isr_8`">
        <field name="DATA_COUNT_MSB" from="2" to="0" access="RW" desc="These bits are the 3 MSb bits of an 11-bit counter. The LSb are the Data Count[7:0] bits of the CNT1 register. Refer to the CNT1 register for more information.">
        </field>
        <field name="DATA_VALID"     from="4" to="4" access="RW" desc="DATA_ERROR - 0, DATA_VALID - 1.">
        </field>
        <field name="DATA_TOGGLE"    from="7" to="7" access="RW" desc="This bit selects the DATA packet's toggle state. For IN transactions firmware must set this bit to the expected state. For OUT transactions the hardware sets this bit to the state of the received Data Toggle bit.">
        </field>
    </register>

    <register name="SIE_EP8_CNT1"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__SIE_EP8_CNT1" bitWidth="`$DW_RegSize`" 
    desc="SIE Endpoint 1 Count1 Register"
    hidden="`$rm_ep_isr_8`">
        <field name="DATA_COUNT" from="7" to="0" access="RW" desc="These bits are the 8 LSb of a 11-bit counter.  The 3 MSb bits are in the CNT0 register. The 11-bit count indicates the number of data bytes in a transaction.">
        </field>
    </register>
        
    <register name="ARB_EP8_CFG"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP8_CFG" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Configuration Register"
    hidden="`$rm_ep_isr_8`">
        <field name="IN_DATA_RDY"   from="0" to="0" access="RW" desc="Indication that Endpoint Packet Data is Ready in Main memory">
        </field>
        <field name="DMA_REQ"       from="1" to="1" access="RW" desc="Manual DMA Request for a particular (1 to 8) endpoint; changing this field from 0 to 1 causes a DMA request to be generated.">
        </field>
        <field name="CRC_BYPASS"    from="2" to="2" access="RW" desc="CRC_NORMAL - 0, CRC_BYPASS - 1">
        </field>
        <field name="RESET_PTR"     from="3" to="3" access="RW" desc="RESET_KRYPTON - 0, RESET_NORMAL - 1">
        </field>
    </register>

    <register name="ARB_EP8_INT_EN"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP8_INT_EN" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Enable Register"
    hidden="`$rm_ep_isr_8`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_EP8_INT_SR"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_EP8_SR" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Interrupt Status Register"
    hidden="`$rm_ep_isr_8`">
        <field name="IN_BUF_FULL_EN"    from="0" to="0" access="RW" desc="IN Endpoint Local Buffer Full">
        </field>
        <field name="DMA_GNT_EN"        from="1" to="1" access="RW" desc="Endpoint DMA Grant">
        </field>
        <field name="BUF_OVER_EN"       from="2" to="2" access="RW" desc="Endpoint Buffer Overflow">
        </field>
        <field name="BUF_UNDER_EN"      from="3" to="3" access="RW" desc="Endpoint Buffer Underflow">
        </field>
        <field name="ERR_INT_EN"        from="4" to="4" access="RW" desc="Endpoint Error in Transaction Interrupt">
        </field>
        <field name="DMA_TERMIN_EN"     from="5" to="5" access="RW" desc="Endpoint DMA Terminated Enable">
        </field>
    </register>

    <register name="ARB_RW8_WA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW8_WA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address LSB Register"
    hidden="`$rm_ep_isr_8`">
        <field name="WA8" from="7" to="0" access="RW" desc="Write Address for EP.">
        </field>
    </register>

    <register name="ARB_RW8_WA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW8_WA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Write Address MSB Register"
    hidden="`$rm_ep_isr_8`">
        <field name="WA9" from="0" to="0" access="RW" desc="Write Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW8_RA"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW8_RA" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address LSB Register"
    hidden="`$rm_ep_isr_8`">
        <field name="RA8" from="7" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>

    <register name="ARB_RW8_RA_MSB"
    address="`$INSTANCE_NAME`_`$PRIMITIVE_INSTANCE`__ARB_RW8_RA_MSB" bitWidth="`$DW_RegSize`" 
    desc="Arbiter Endpoint 1 Read Address MSB Register"
    hidden="`$rm_ep_isr_8`">
        <field name="RA9" from="0" to="0" access="RW" desc="Read Address for EP MSB.">
        </field>
    </register>
    <!-- END: Endpoint 8 configuration and operation registers -->
    
    
  </block>
</deviceData>

