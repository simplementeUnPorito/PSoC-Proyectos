/*******************************************************************************
* Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions, 
* disclaimers, and limitations in the end user license agreement accompanying 
* the software package with which this file was provided.
*******************************************************************************/

using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System;

using CyDesigner.Extensions.Common;
using CyDesigner.Extensions.Gde;

using Cypress.Semiconductor.CyDesigner.cy_logic_gate_customizer;

namespace Cypress.Semiconductor.CyDesigner.demux_v1_10
{
    public class CyCustomizer :
        ICyVerilogCustomize_v1,
        ICyShapeCustomize_v1
    {
        const string SELECTOR_BASE_NAME = "muxsel";
        const string INPUT_TERM_BASE_NAME = "inTerm";
        const string GENERATED_SHAPE = "SymbolShape";

        #region ICyVerilogCustomize_v1 Members

        public CyCustErr CustomizeVerilog(
            ICyInstQuery_v1 instQuery,
            ICyTerminalQuery_v1 termQuery,
            out string codeSnippet)
        {
            Debug.Assert(instQuery != null);
            if (instQuery == null)
            {
                codeSnippet = string.Empty;
                return new CyCustErr("Invalid instance query parameter");
            }

            CyCompDevParam numTerminals_param = instQuery.GetCommittedParam("NumOutputTerminals");
            uint numTerminals = uint.Parse(numTerminals_param.Value);
            
            CyCompDevParam terminalWidth_param = instQuery.GetCommittedParam("TerminalWidth");
            uint terminalWidth = uint.Parse(terminalWidth_param.Value);
            string suffix = CyBuilder.GetTermSuffix(terminalWidth);

            // Collect the signal segment names for each of the instance terminals
            List<string> outSigSegNames = new List<string>();
            string inTermSigSegName = string.Empty;
            String inTermSigSegNameWithIndex = string.Empty;

            // Note: This works because the term names are generated by us in
            // CustomizeShapes(). The names are created as "term0", "term1" ...
            // The case statements are netlisted in the same order
            foreach (string termName in GetOrderedOutputNames(numTerminals, suffix))
            {
                outSigSegNames.Add(termQuery.GetTermSigSegName(termName));
            }

            //================================================================
            // NB: Warp requires simple names in the sensitivity list, so we use  
            // the base name; cf. mux customizer code comments.
            //================================================================
            inTermSigSegName = termQuery.GetTermSigSegBaseName(INPUT_TERM_BASE_NAME + suffix);
            inTermSigSegNameWithIndex = termQuery.GetTermSigSegName(INPUT_TERM_BASE_NAME + suffix);

            // Get selector terminal name and width
            string instanceName = instQuery.InstanceName;
            string selectorSigSegName = string.Empty;
            string selectorSigSegBaseName = string.Empty;
            string selectorTermName = string.Empty;
            uint selectorWidth = CyBinaryStringGenerator.GetNumSelectorBits(numTerminals);

            selectorTermName = termQuery.GetTermName(SELECTOR_BASE_NAME);
            selectorSigSegName = termQuery.GetTermSigSegName(selectorTermName);
            selectorSigSegBaseName = termQuery.GetTermSigSegBaseName(selectorTermName);

            CyVerilogBuilder vBuilder = new CyVerilogBuilder();
            vBuilder.AddComment("-- De Mux start --");
            vBuilder.AddIfGenerateStmt("1", instanceName);

            // Declare temp registers to hold the output values
            string[] tempRegNames = new string[numTerminals];
            for (int i = 0; i < numTerminals; i++)
            {
                string tempRegName = CyVerilogBuilder.GetTmpName("tmp", instanceName + "_" + i.ToString(), "reg");
                vBuilder.DeclareReg(tempRegName, suffix);
                tempRegNames[i] = tempRegName;
            }

            string selector = selectorSigSegBaseName;

            List<string> sensitivity = new List<string>();
            sensitivity.Add(inTermSigSegName);
            sensitivity.Add(selector);
            vBuilder.DefineAlways(sensitivity);

            vBuilder.BeginBlock();
            selector = selectorSigSegName;
            vBuilder.AddCaseStmt(selector);
            // This class generates the strings, "00", "01", "10", "11"
            CyBinaryStringGenerator gen = new CyBinaryStringGenerator((uint)outSigSegNames.Count);
            IEnumerator<string> binStrEnumerator = gen.GetBinaryStr().GetEnumerator();
            
            string literal= string.Format("{0}'b{1}", terminalWidth,
            CyBinaryStringGenerator.GetStringOf0s(terminalWidth));
            
            // Generates case stmt blocks
            for (int term = 0; term < numTerminals; term++)
            {
                binStrEnumerator.MoveNext();

                string caseOption = string.Format("{0}'b{1}", selectorWidth, binStrEnumerator.Current);
                vBuilder.WriteLine(caseOption + ":");
                vBuilder.BeginBlock();
                for (int i = 0; i < numTerminals; i++)
                {
                    string rhs = literal;
                    if (i == term)
                        rhs = inTermSigSegNameWithIndex;
                    vBuilder.AddStatement(tempRegNames[i], rhs);
                }
                vBuilder.EndBlock();
            }

            vBuilder.AddEndCaseStmt();
            vBuilder.EndBlock(); // End of always

            // Write out the assign statements
            for (int i = 0; i < numTerminals; i++)
            {
                vBuilder.AddAssignStatement(outSigSegNames[i], tempRegNames[i]);
            }

            vBuilder.AddEndIfStmt(); // end of block
            vBuilder.AddComment("-- De Mux end --");

            codeSnippet = vBuilder.VerilogString;

            return CyCustErr.OK;
        }

        private IEnumerable<string> GetOrderedOutputNames(uint numTerminals, string suffix)
        {
            for (int index = 0; index < (int)numTerminals; index++)
            {
                yield return string.Format("term{0}{1}", index, suffix);
            }
        }

        #endregion

        #region ICyShapeCustomize_v1 Members

        public CyCustErr CustomizeShapes(
            ICyInstQuery_v1 instQuery,
            ICySymbolShapeEdit_v1 shapeEdit,
            ICyTerminalEdit_v1 termEdit)
        {
            // We leave the symbol as it is for symbol preview
            if (instQuery.IsPreviewCanvas)
                return CyCustErr.OK;

            shapeEdit.ShapesRemove("dummyTerminal");
            shapeEdit.ShapesRemove("symbolName");
            shapeEdit.ShapesRemove("preview_shape");
            termEdit.RemoveAllTerminals();

            // Add term shapes
            List<string> shapeTags = new List<string>();
            shapeTags.Add(GENERATED_SHAPE);

            CyCompDevParam numTerminals_param = instQuery.GetCommittedParam("NumOutputTerminals");
            uint numTerminals = uint.Parse(numTerminals_param.Value);
            CyBuilder helper = new CyBuilder(numTerminals, shapeEdit.UserBaseUnit);

            CyCompDevParam terminalWidth_param = instQuery.GetCommittedParam("TerminalWidth");
            uint terminalWidth = uint.Parse(terminalWidth_param.Value);
            string suffix = CyBuilder.GetTermSuffix(terminalWidth);

            IEnumerable<string> termNames = GetOrderedOutputNames(numTerminals, suffix);
            IEnumerator<string> nameEnum = termNames.GetEnumerator();

            // Output terminals
            int index = 0;
            foreach (float offset in helper.GetTerminalOffsets())
            {
                nameEnum.MoveNext();
                string termName = nameEnum.Current;
                termEdit.TerminalAdd(termName, CyCompDevTermDir.OUTPUT,
                    CyCompDevTermType.DIGITAL, new PointF(36f, offset), string.Empty, 0f, false);
                // Move Annotations to correct location
                if (index == 0)
                {
                    shapeEdit.ShapesMoveTo("lowest", new PointF(29.0f, offset - 2.3F));
                }
                shapeEdit.ShapesMoveTo("highest", new PointF(29.0f, offset - 3.5F));

                index++;
            }

            // input Terminal
            termEdit.TerminalAdd(INPUT_TERM_BASE_NAME + suffix, CyCompDevTermDir.INPUT,
                CyCompDevTermType.DIGITAL, new PointF(0f, 0f), string.Empty, 0f, false);

            // Mux Shape
            if (numTerminals == 2)
            {
                // If the number of terminals are 2, we still have build the shape
                // as if it were a 4 input mux.
                helper = new CyBuilder(4, shapeEdit.UserBaseUnit);
            }

            PointF topLeft = new PointF(6f, helper.TopY + 12f);
            PointF bottomLeft = new PointF(6f, helper.BottomY - 12f);
            PointF topRight = new PointF(30f, helper.TopY - 6f);
            PointF bottomRight = new PointF(30f, helper.BottomY + 6f);
            PointF selectorTermLocation = new PointF(18f, helper.BottomY + 6f);

            // Selector term extender line
            List<string> stExtLine = new List<string>();
            stExtLine.Add("term_extend_line");
            shapeEdit.CreatePolyline(stExtLine,
                new PointF(18f, helper.BottomY),
                new PointF(18f, helper.BottomY - 3f));
            shapeEdit.SetOutlineWidth(stExtLine[0], 0.25f);

            // Remove Default Slash
            shapeEdit.ShapesRemove("bus_slash");

            // Create Bus Width Slash
            List<string> selBusSlash = new List<string>();
            selBusSlash.Add("selector_bus_slash");
            shapeEdit.CreatePolyline(selBusSlash,
                new PointF(15f, helper.BottomY + 6f),
                new PointF(21f, helper.BottomY + 1.5f));
            shapeEdit.SetOutlineWidth(selBusSlash[0], 0f);

            // Move Bus Width Annotation
            shapeEdit.ShapesMoveTo("selectorBus", new PointF(14f, helper.BottomY));

            // Selector terminal
            uint numOfSelBits = CyBinaryStringGenerator.GetNumSelectorBits(numTerminals);
            string selectorTermName = SELECTOR_BASE_NAME + CyBuilder.GetTermSuffix(numOfSelBits);
            CyCustErr err = termEdit.TerminalAdd(selectorTermName, CyCompDevTermDir.INPUT,
                CyCompDevTermType.DIGITAL, selectorTermLocation, string.Empty, 270f, false);
            Debug.Assert(err.IsOk, "terminal add failed");

            // De-Mux trapeziod
            shapeEdit.CreatePolyline(shapeTags,
                topLeft, topRight, bottomRight, bottomLeft, topLeft);
            shapeEdit.ShapesConvertToClosed(shapeTags, shapeTags);

            // Ensure Annotations are on top. 
            shapeEdit.BringToFront("lowest");
            shapeEdit.BringToFront("highest");
            shapeEdit.SendToBack(GENERATED_SHAPE);
            return CyCustErr.OK;
        }

        #endregion
    }
}
