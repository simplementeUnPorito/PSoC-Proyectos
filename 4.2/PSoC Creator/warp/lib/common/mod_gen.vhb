--

--------------------------------------------------------------------------------
-- Module generation package components
--------------------------------------------------------------------------------
library cypress;
use cypress.cypress.all;

use cypress.ultragenpkg_bb.all;
PACKAGE bit_arith is

constant noWarning : boolean := false;
constant null_vect : bit_vector (0 downto 1) := (others => '0');

function resize (x : bit_vector; size : natural) return bit_vector;
function shift_left (a : bit_vector; dist : natural) return bit_vector;
function shift_right (a : bit_vector; dist : natural) return bit_vector;
function rotate_left (a : bit_vector; dist : natural) return bit_vector;
function rotate_right (a : bit_vector; dist : natural) return bit_vector;
function to_integer (a : bit_vector) return natural;
function to_bit_vector (a, size : natural) return bit_vector;
function rising_edge (signal a: bit) return boolean;
function falling_edge (signal a: bit) return boolean;

function "+" (a,b : bit_vector) return bit_vector;
function "+" (a : bit_vector; b : natural) return bit_vector;
function "+" (a : natural; b : bit_vector) return bit_vector;
function "-" (a,b : bit_vector) return bit_vector;
function "-" (a : bit_vector; b : natural) return bit_vector;
function "-" (a : natural; b : bit_vector) return bit_vector;
function "*" (a,b : bit_vector) return bit_vector;
function "*" (a : bit_vector; b : natural) return bit_vector;
function "*" (a : natural; b : bit_vector) return bit_vector;
function "=" (a,b : bit_vector) return boolean;
function "=" (a : bit_vector; b : natural) return boolean;
function "=" (a : natural; b : bit_vector) return boolean;
function ">" (a,b : bit_vector) return boolean;
function ">" (a : bit_vector; b : natural) return boolean;
function ">" (a : natural; b : bit_vector) return boolean;
function "<" (a,b : bit_vector) return boolean;
function "<" (a : bit_vector; b : natural) return boolean;
function "<" (a : natural; b : bit_vector) return boolean;
function "/=" (a,b : bit_vector) return boolean;
function "/=" (a : bit_vector; b : natural) return boolean;
function "/=" (a : natural; b : bit_vector) return boolean;
function ">=" (a,b : bit_vector) return boolean;
function ">=" (a : bit_vector; b : natural) return boolean;
function ">=" (a : natural; b : bit_vector) return boolean;
function "<=" (a,b : bit_vector) return boolean;
function "<=" (a : bit_vector; b : natural) return boolean;
function "<=" (a : natural; b : bit_vector) return boolean;
function "sll" (a: bit_vector; b: integer) return bit_vector;
function "srl" (a: bit_vector; b: integer) return bit_vector;
function "rol" (a: bit_vector; b: integer) return bit_vector;
function "ror" (a: bit_vector; b: integer) return bit_vector;
attribute ultragen of "+" [bit_vector, bit_vector return bit_vector] :
                                function is "add_vv_bb";
attribute ultragen of "+" [bit_vector, integer return bit_vector] :
                                function is "add_vi_bb";
attribute ultragen of "+" [integer, bit_vector return bit_vector] :
                                function is "add_iv_bb";
attribute ultragen of "-" [bit_vector, bit_vector return bit_vector] :
                                function is "sub_vv_bb";
attribute ultragen of "-" [bit_vector, integer return bit_vector] :
                                function is "sub_vi_bb";
attribute ultragen of "-" [integer, bit_vector return bit_vector] :
                                function is "sub_iv_bb";
attribute ultragen of "*" [bit_vector, bit_vector return bit_vector] :
                                function is "mul_vv_bb";
attribute ultragen of "*" [bit_vector, integer return bit_vector] :
                                function is "mul_vi_bb";
attribute ultragen of "*" [integer, bit_vector return bit_vector] :
                                function is "mul_iv_bb";
attribute ultragen of "=" [bit_vector, bit_vector return boolean] :
                                function is "cmp_vv_bb";
attribute ultragen of "=" [bit_vector, integer return boolean] :
                                function is "cmp_vi_bb";
attribute ultragen of "=" [integer, bit_vector return boolean] :
                                function is "cmp_iv_bb";
attribute ultragen of ">" [bit_vector, bit_vector return boolean] :
                                function is "cmp_vv_bb";
attribute ultragen of ">" [bit_vector, integer return boolean] :
                                function is "cmp_vi_bb";
attribute ultragen of ">" [integer, bit_vector return boolean] :
                                function is "cmp_iv_bb";
attribute ultragen of "<" [bit_vector, bit_vector return boolean] :
                                function is "cmp_vv_bb";
attribute ultragen of "<" [bit_vector, integer return boolean] :
                                function is "cmp_vi_bb";
attribute ultragen of "<" [integer, bit_vector return boolean] :
                                function is "cmp_iv_bb";
attribute ultragen of "/=" [bit_vector, bit_vector return boolean] :
                                function is "cmp_vv_bb";
attribute ultragen of "/=" [bit_vector, integer return boolean] :
                                function is "cmp_vi_bb";
attribute ultragen of "/=" [integer, bit_vector return boolean] :
                                function is "cmp_iv_bb";
attribute ultragen of ">=" [bit_vector, bit_vector return boolean] :
                                function is "cmp_vv_bb";
attribute ultragen of ">=" [bit_vector, integer return boolean] :
                                function is "cmp_vi_bb";
attribute ultragen of ">=" [integer, bit_vector return boolean] :
                                function is "cmp_iv_bb";
attribute ultragen of "<=" [bit_vector, bit_vector return boolean] :
                                function is "cmp_vv_bb";
attribute ultragen of "<=" [bit_vector, integer return boolean] :
                                function is "cmp_vi_bb";
attribute ultragen of "<=" [integer, bit_vector return boolean] :
                                function is "cmp_iv_bb";
end bit_arith;

--------------------------------------------------------------------------------

package body bit_arith is

function to_integer (a : bit_vector) return natural is
    variable tmp : bit_vector(a'length-1 downto 0);
    variable result, abit: natural := 0;
begin
    if (a'length < 1) then
        assert (noWarning)
        report "TO_INTEGER: null detected, returning 0."
        severity warning;
        return 0;
        end if;
    tmp := a;
    for i in tmp'reverse_range loop
        abit := 0;
        if tmp(i) = '1' then
            abit := 2**i;
        end if;
        result := result + abit;
        exit when i = 31;
    end loop;
    return result;
end to_integer;

function to_bit_vector (a, size : natural) return bit_vector is
    variable result : bit_vector(size-1 downto 0) := (others => '0');
    variable b : natural;
    variable newsize : integer := size;
begin
    if (newsize < 1 ) then return null_vect; end if;
    if (newsize > 31) then
        newsize := 31;
    end if;
    if (newsize < 31) then
        for i in result'reverse_range loop
            if ((a/(2**i)) mod 2) = 1 then
                result(i) := '1';
            end if;
        end loop;
    end if;
    if (newsize = 31) then
        b := a/2;
        if ((a mod 2) = 1) then
            result(0) := '1';
        end if;
        for i in 0 to 30 loop
            if ((b/(2**i)) mod 2) = 1 then
                result(i+1) := '1';
            end if;
        end loop;
    end if;
    return result;
end to_bit_vector;

function resize (x : bit_vector; size : natural) return bit_vector is
    variable a : bit_vector ((x'length-1) downto 0) := x ;
    variable result : bit_vector((size - 1) downto 0) := (others => '0');
begin
    if (size < 1 ) then return null_vect; end if;
    if a'length < size then
        result((result'high) downto a'length) := (others => '0');
        result((a'length - 1) downto 0) := a;
    else
        result := a((size-1) downto 0);
    end if;
    return result;
end resize;

function shift_left (a : bit_vector; dist : natural) return bit_vector is
    variable result : bit_vector((a'length-1) downto 0) := (others => '0');
    variable atmp : bit_vector((a'length-1) downto 0);
begin
    atmp := a;
    if (dist = 0) then
        result := a;
    end if;
    if (dist < a'length) then
        result(result'high downto dist) := atmp((atmp'high-dist) downto 0);
    end if;
    return result;
end shift_left;

function shift_right (a : bit_vector; dist : natural) return bit_vector is
    variable result : bit_vector((a'length-1) downto 0) := (others => '0');
    variable atmp : bit_vector((a'length-1) downto 0);
begin
    atmp := a;
    if (dist = 0) then
        result := a;
    end if;
    if (dist < a'length) then
        result((result'high-dist) downto 0) := atmp(atmp'high downto dist);
    end if;
    return result;
end shift_right;

function rotate_left (a : bit_vector; dist : natural) return bit_vector is
    variable result : bit_vector((a'length-1) downto 0);
    variable dis : integer := dist mod a'length;
    variable atmp : bit_vector((a'length-1) downto 0);
begin
    atmp := a;
    if (dis = 0) then
        result := a;
    else
        result(result'high downto dis) := atmp((atmp'high-dis) downto 0);
        result((dis-1) downto 0) := atmp(atmp'high downto (atmp'length-dis));
    end if;
    return result;
end rotate_left;

function rotate_right (a : bit_vector; dist : natural) return bit_vector is
    variable result : bit_vector((a'length-1) downto 0);
    variable dis : integer := dist mod a'length;
    variable atmp : bit_vector((a'length-1) downto 0);
begin
    atmp := a;
    if (dis = 0) then
        result := a;
    else
        result(result'high downto (result'length-dis)):= atmp((dis-1) downto 0);
        result((result'high-dis) downto 0) := atmp(atmp'high downto dis);
    end if;
    return result;
end rotate_right;
function rising_edge (signal a : bit) return boolean is
begin
    return a'event AND (a = '1');
end rising_edge;

function falling_edge (signal a : bit) return boolean is
begin
    return a'event AND (a = '0');
end falling_edge;

function "sll" (a: bit_vector; b: integer) return bit_vector is
begin
    if (b >= 0) then
        return SHIFT_LEFT(a, b);
    else
        return SHIFT_RIGHT(a, -b);
    end if;
end "sll";

function "srl" (a: bit_vector; b: integer) return bit_vector is
begin
    if (b >= 0) then
        return SHIFT_RIGHT(a, b);
    else
        return SHIFT_LEFT(a, -b);
    end if;
end "srl";

function "rol" (a: bit_vector; b: integer) return bit_vector is
begin
    if (b >= 0) then
        return ROTATE_LEFT(a, b);
    else
        return ROTATE_RIGHT(a, -b);
    end if;
end "rol";

function "ror" (a: bit_vector; b: integer) return bit_vector is
begin
    if (b >= 0) then
        return ROTATE_RIGHT(a, b);
    else
        return ROTATE_LEFT(a, -b);
    end if;
end "ror";
end bit_arith;
